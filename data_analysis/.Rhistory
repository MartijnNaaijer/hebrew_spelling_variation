bayes_model_mt_sp_dss_ptca_n3 <- fit_brm_model(dat,
formula_mt_sp_dss_ptca_n3,
3000, 6000, 0.95, prior_intercept_logit)
# R2 =
summary(bayes_model_mt_sp_dss_ptca_n2)
# R2 =
summary(bayes_model_mt_sp_dss_ptca_n3)
formula_mt_sp_dss_ptca_n2 <- has_vowel_letter ~
has_suffix*law_phase2 +
has_prefix*law_phase2 +
ay_ay*law_phase2 +
i_yod*law_phase2 +
(1 | scr_book2/lex)
bayes_model_mt_sp_dss_ptca2 <- fit_brm_model(dat,
formula_mt_sp_dss_ptca2,
3000, 6000, 0.99)
bayes_model_mt_sp_dss_ptca_n2 <- fit_brm_model(dat,
formula_mt_sp_dss_ptca_n2,
3000, 6000, 0.95, prior_intercept_logit)
#
bayes_factor(bayes_model_mt_sp_dss_ptca_n2, bayes_model_mt_sp_dss_ptca_n3)
bayes_R2(bayes_model_mt_sp_dss_ptca_n2)
# R2 =
summary(bayes_model_mt_sp_dss_ptca_n2)
ranef(bayes_model_mt_sp_dss_ptca_n2)
bayes_R2(bayes_model_mt_sp_dss_ptca_n2)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
################################################################################
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
# VERBS WITH ARTICIPLES WITHOUT O SOUND IN MT
NOT_USEFUL_VERBS <- c('ML>[', 'JR>[', '>SP[')
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP',
'LBH_non_QSP', 'Other_non_QSP',
'Pent_QSP', 'Other_QSP')
DATASET <- 'ptca_qal.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
dat <- dat |> filter(!lex %in% NOT_USEFUL_VERBS) |> droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
dim(dat)
head(dat)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT'))
str(mt_sp)
mt_sp <- droplevels(mt_sp)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
dat$iii_h <- as.factor(as.numeric(substr(dat$lex, 3, 3) == 'H'))
dat$iii_alef <- as.factor(as.numeric(substr(dat$lex, 3, 3) == '>'))
dat$i_nun <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'N'))
head(dat)
str(dat)
#############################################
# NEEDED FOR CLUSTERING IN FILE clustering_regression_results.R
phase_book_df <- dat |>  distinct(law_phase2, scr_book2)
write.csv(phase_book_df,
'C:/Users/geitb/Dropbox/monograph_orthography/cluster_analysis/phase_book_ptca.csv',
row.names=FALSE)
# III-he
table(dat$iii_h, dat$has_vowel_letter, dat$law_phase2)
# III->
table(dat$iii_alef, dat$has_vowel_letter, dat$law_phase2)
# I-yod
table(dat$i_yod, dat$has_vowel_letter, dat$law_phase2)
# I-NUN
table(dat$i_nun, dat$has_vowel_letter, dat$law_phase2)
## ALL FIRST LETTERS
dat$first_let <- as.factor(substr(dat$lex, 1, 1))
table(dat$first_let, dat$has_vowel_letter, dat$law_phase2)
dat |> filter(first_let == 'Z')
prior_intercept_prob <- mean(as.numeric(as.character(dat$has_vowel_letter)))
prior_intercept_logit <- prob2logit(prior_intercept_prob)
formula_mt_sp_dss_ptca_n4 <- has_vowel_letter ~
has_suffix*law_phase2 +
ay_ay*law_phase2 +
i_yod*law_phase2 +
i_nun*law_phase2 +
(1 | scr_book2/lex)
formula_mt_sp_dss_ptca_n3 <- has_vowel_letter ~
has_suffix*law_phase2 +
has_prefix*law_phase2 +
ay_ay*law_phase2 +
i_yod*law_phase2 +
i_nun*law_phase2 +
(1 | scr_book2/lex)
bayes_model_mt_sp_dss_ptca_n3 <- fit_brm_model(dat,
formula_mt_sp_dss_ptca_n4,
5000, 15000, 0.95, prior_intercept_logit)
# R2 =
summary(bayes_model_mt_sp_dss_ptca_n4)
file_path_mt_sp_dss_ptca_n4 <- file.path(MODEL_FOLDER, 'bayes_model_mt_sp_dss_affix_effect_ptca_n4.rds')
saveRDS(bayes_model_mt_sp_dss_ptca_n3, file = file_path_mt_sp_dss_ptca_n4)
#
bayes_model_mt_sp_dss_ptca_n4 <- bayes_model_mt_sp_dss_ptca_n3
file_path_mt_sp_dss_ptca_n3 <- file.path(MODEL_FOLDER, 'bayes_model_mt_sp_dss_affix_effect_ptca_n3.rds')
#
bayes_model_mt_sp_dss_ptca_n4 <- bayes_model_mt_sp_dss_ptca_n3
bayes_model_mt_sp_dss_ptca_n3 <- readRDS(file_path_mt_sp_dss_ptca_n3)
bayes_factor(bayes_model_mt_sp_dss_ptca_n3, bayes_model_mt_sp_dss_ptca_n4)
bayes_R2(bayes_model_mt_sp_dss_ptca_n4)
ay_ay_df <- dat |> group_by(law_phase2, i_nun) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.bayes(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
table(dat$ay_ay, dat$has_vowel_letter)
# Ay-Ay
ay_ay_df <- dat |> group_by(law_phase2, ay_ay) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.bayes(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
library(binom)
table(dat$ay_ay, dat$has_vowel_letter)
# Ay-Ay
ay_ay_df <- dat |> group_by(law_phase2, ay_ay) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.bayes(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
#hpd_ay_ay$law_phase2 <- ay_ay_df$law_phase2
hpd_ay_ay$ay_ay <- ay_ay_df$ay_ay
hpd_ay_ay
hpd_ay_ay$law_phase2  <- c('MT Pentateuch', 'MT Pentateuch', 'SP', 'SP', 'MT Former Prophets', 'MT Former Prophets',
'MT LBH', 'MT LBH', 'MT Other', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Former Prophets', 'Non-QSP LBH', 'Non-QSP Other', 'Non-QSP Other',
'QSP Pentateuch', 'QSP Other', 'QSP Other')
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=unique(hpd_ay_ay$law_phase2))
hpd_ay_ay
ggplot(data = hpd_ay_ay, aes(x = law_phase2, y = mean, fill = as.factor(ay_ay))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "Ayin Ayin") +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
scale_fill_discrete(name = '', labels = c('Other verbs', 'Ayin-ayin verbs'))
head(dat)
dat |> filter(first_Let == 'N')
dat |> filter(first_let == 'N')
nun <- dat |> filter(first_let == 'N')
nun |> filter(scroll == 'MT')
unique(nun$lex)
nun <- dat |> filter(first_let == 'N')
unique(nun$lex)
nun |> filter(scroll == 'MT')
# R2 = 0.575
summary(bayes_model_mt_sp_dss_ptca_n3)
table(nun_mt$lex, nun_mt$has_vowel_letter)
nun_mt <- nun |> filter(scroll == 'MT')
table(nun_mt$lex, nun_mt$has_vowel_letter)
nun_mt <- nun |> filter(scroll == 'MT') |> droplevels()
table(nun_mt$lex, nun_mt$has_vowel_letter)
table(nun_mt$lex, nun_mt$law_phase2, nun_mt$has_vowel_letter)
table(nun_mt$lex, nun_mt$has_vowel_letter, nun_mt$law_phase2)
hpd_ay_ay <- binom.confint(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_ay_ay$law_phase2 <- ay_ay_df$law_phase2
hpd_ay_ay$ay_ay <- ay_ay_df$iii_h
hpd_ay_ay <- binom.confint(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_ay_ay$law_phase2 <- ay_ay_df$law_phase2
hpd_ay_ay$ay_ay <- ay_ay_df$i_nun
ay_ay_df <- dat |> group_by(law_phase2, i_nun) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.bayes(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
ay_ay_df <- dat |> group_by(law_phase2, i_nun) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.confint(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_ay_ay$law_phase2 <- ay_ay_df$law_phase2
hpd_ay_ay$ay_ay <- ay_ay_df$i_nun
hpd_ay_ay
groups <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other', 'Pent_non_QSP',
'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP', 'Pent_QSP', 'Other_QSP')
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=groups)
hpd_ay_ay$law_phase2  <- c('MT Pentateuch', 'MT Pentateuch', 'SP', 'SP', 'MT Former Prophets', 'MT Former Prophets',
'MT LBH', 'MT LBH', 'MT Other', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Pentateuch', 'Non-QSP Former Prophets', 'Non-QSP Former Prophets',
'Non-QSP LBH', 'Non-QSP LBH', 'Non-QSP Other', 'Non-QSP Other',
'QSP Pentateuch', 'QSP Pentateuch', 'QSP Other', 'QSP Other')
hpd_ay_ay$law_phase2 <- factor(hpd_suffix$law_phase2, levels=unique(hpd_suffix$law_phase2))
ay_ay_df <- dat |> group_by(law_phase2, i_nun) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.bayes(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_ay_ay$law_phase2 <- ay_ay_df$law_phase2
hpd_ay_ay$ay_ay <- ay_ay_df$i_nun
hpd_ay_ay
groups <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other', 'Pent_non_QSP',
'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP', 'Pent_QSP', 'Other_QSP')
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=groups)
hpd_ay_ay$law_phase2  <- c('MT Pentateuch', 'MT Pentateuch', 'SP', 'SP', 'MT Former Prophets', 'MT Former Prophets',
'MT LBH', 'MT LBH', 'MT Other', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Pentateuch', 'Non-QSP Former Prophets', 'Non-QSP Former Prophets',
'Non-QSP LBH', 'Non-QSP LBH', 'Non-QSP Other', 'Non-QSP Other',
'QSP Pentateuch', 'QSP Pentateuch', 'QSP Other', 'QSP Other')
hpd_ay_ay$law_phase2 <- factor(hpd_suffix$law_phase2, levels=unique(hpd_suffix$law_phase2))
ggplot(data = hpd_ay_ay, aes(x = law_phase2, y = mean, fill = as.factor(ay_ay))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "Pe-Nun") +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
scale_fill_discrete(name = '', labels = c('Other verbs', 'Pe-Nun verbs'))
hpd_ay_ay$law_phase2  <- c('MT Pentateuch', 'MT Pentateuch', 'SP', 'SP', 'MT Former Prophets', 'MT Former Prophets',
'MT LBH', 'MT LBH', 'MT Other', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Pentateuch', 'Non-QSP Former Prophets', 'Non-QSP Former Prophets',
'Non-QSP LBH', 'Non-QSP LBH', 'Non-QSP Other', 'Non-QSP Other',
'QSP Pentateuch', 'QSP Pentateuch', 'QSP Other', 'QSP Other')
hpd_ay_ay$law_phase2 <- factor(hpd_suffix$law_phase2, levels=unique(hpd_ay_ay$law_phase2))
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=unique(hpd_ay_ay$law_phase2))
ggplot(data = hpd_ay_ay, aes(x = law_phase2, y = mean, fill = as.factor(ay_ay))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "Pe-Nun") +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
scale_fill_discrete(name = '', labels = c('Other verbs', 'Pe-Nun verbs'))
ay_ay_df <- dat |> group_by(law_phase2, i_nun) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.bayes(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_ay_ay$law_phase2 <- ay_ay_df$law_phase2
hpd_ay_ay$ay_ay <- ay_ay_df$i_nun
hpd_ay_ay
groups <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other', 'Pent_non_QSP',
'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP', 'Pent_QSP', 'Other_QSP')
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=groups)
hpd_ay_ay$law_phase2  <- c('MT Pentateuch', 'MT Pentateuch', 'SP', 'SP', 'MT Former Prophets', 'MT Former Prophets',
'MT LBH', 'MT LBH', 'MT Other', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Pentateuch', 'Non-QSP Former Prophets', 'Non-QSP Former Prophets',
'Non-QSP LBH', 'Non-QSP LBH', 'Non-QSP Other', 'Non-QSP Other',
'QSP Pentateuch', 'QSP Pentateuch', 'QSP Other', 'QSP Other')
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=unique(hpd_ay_ay$law_phase2))
ggplot(data = hpd_ay_ay, aes(x = law_phase2, y = mean, fill = as.factor(ay_ay))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "Pe-Nun") +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
scale_fill_discrete(name = '', labels = c('Other verbs', 'Pe-Nun verbs'))
nun <- dat |> filter(first_let == 'N')
unique(nun$lex)
nun_mt <- nun |> filter(scroll == 'MT') |> droplevels()
table(nun_mt$lex, nun_mt$has_vowel_letter, nun_mt$law_phase2)
table(nun$lex, nun$has_vowel_letter, nun$law_phase2)
nun <- dat |> filter(first_let == 'N') |> droplevels()
unique(nun$lex)
nun_mt <- nun |> filter(scroll == 'MT') |> droplevels()
table(nun$lex, nun$has_vowel_letter, nun$law_phase2)
table(nun_mt$lex, nun_mt$has_vowel_letter, nun_mt$book2)
table(dat$lex)
as.data.frame(table(dat$lex))
colnames(lex_freqs) <- c('lex', 'freq')
lex_freqs <- as.data.frame(table(dat$lex))
colnames(lex_freqs) <- c('lex', 'freq')
merge(dat, lex_freqs, by = 'lex', all = TRUE)
dat <- merge(dat, lex_freqs, by = 'lex', all = TRUE)
head(dat)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
library(binom)
################################################################################
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
# VERBS WITH ARTICIPLES WITHOUT O SOUND IN MT
NOT_USEFUL_VERBS <- c('ML>[', 'JR>[', '>SP[')
DATASET <- 'ptca_qal.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
dat <- dat |> filter(!lex %in% NOT_USEFUL_VERBS) |> droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
lex_freqs <- as.data.frame(table(dat$lex))
colnames(lex_freqs) <- c('lex', 'freq')
dat <- merge(dat, lex_freqs, by = 'lex', all = TRUE)
head(dat)
dat[order(dat$tf_id, decreasing = FALSE), ]
dat <- dat[order(dat$tf_id, decreasing = FALSE), ]
head(dat)
formula_mt_sp_dss_ptca_n5 <- has_vowel_letter ~
freq +
(1 | scr_book2/lex)
bayes_model_mt_sp_dss_ptca_n5 <- fit_brm_model(dat,
formula_mt_sp_dss_ptca_n5,
2000, 4, 0.95, prior_intercept_logit)
bayes_model_mt_sp_dss_ptca_n5 <- fit_brm_model(dat,
formula_mt_sp_dss_ptca_n5,
2000, 4000, 0.95, prior_intercept_logit)
bayes_model_mt_sp_dss_ptca_n5 <- fit_brm_model(dat,
formula_mt_sp_dss_ptca_n5,
2000, 4000, 0.95, prior_intercept_logit)
# R2 =
summary(bayes_model_mt_sp_dss_ptca_n5)
bayes_R2(bayes_model_mt_sp_dss_ptca_n5)
table(dat$freq, dat$has_vowel_letter)
as.data.frame(table(dat$freq, dat$has_vowel_letter))
as.data.frame.matrix(table(dat$freq, dat$has_vowel_letter))
freq_fullness <- as.data.frame.matrix(table(dat$freq, dat$has_vowel_letter))
freq_fullness$total <- freq_fullness$0 + freq_fullness$1
freq_fullness$total <- freq_fullness$`0` + freq_fullness$`1`
freq_fullness
freq_fullness$mean = freq_fullness$`1` / freq_fullness$total
freq_fullness
freq_fullness <- as.data.frame.matrix(table(dat$freq, dat$has_vowel_letter))
freq_fullness
freq_fullness <- as.data.frame.matrix(table(dat$freq, dat$has_vowel_letter))
freq_fullness$mean = freq_fullness$`1` / (freq_fullness$`0` + freq_fullness$`1`)
freq_fullness
plot(rownames(freq_fullness), freq_fullness$mean)
abline(freq_fullness$mean ∼ rownames(freq_fullness))
abline(lm(freq_fullness$mean ~ rownames(freq_fullness)))
plot(rownames(freq_fullness), freq_fullness$mean)
abline(lm(freq_fullness$mean ~ rownames(freq_fullness)))
lm(freq_fullness$mean ~ rownames(freq_fullness))
str(freq_fullness)
freq_fullness$freq <- rownames(freq_fullness)
freq_fullness
str(freq_fullness)
freq_fullness$freq <- rownames(freq_fullness) |> as.numeric()
freq_fullness
str(freq_fullness)
plot(rownames(freq_fullness), freq_fullness$mean)
abline(lm(freq_fullness$mean ~ rownames(freq_fullness)))
abline(lm(freq_fullness$mean ~ freq_fullness$freq))
freq_fullness <- as.data.frame.matrix(table(dat$freq, dat$has_vowel_letter))
freq_fullness$mean = freq_fullness$`1` / (freq_fullness$`0` + freq_fullness$`1`)
freq_fullness$freq <- rownames(freq_fullness) |> as.numeric()
freq_fullness
str(freq_fullness)
plot(rownames(freq_fullness), freq_fullness$mean)
abline(lm(freq_fullness$mean ~ freq_fullness$freq))
lm(freq_fullness$mean ~ rownames(freq_fullness))
f_dat <- dat |> filter(scroll == 'MT')
freq_fullness <- as.data.frame.matrix(table(f_dat$freq, f_dat$has_vowel_letter))
freq_fullness$mean = freq_fullness$`1` / (freq_fullness$`0` + freq_fullness$`1`)
freq_fullness$freq <- rownames(freq_fullness) |> as.numeric()
freq_fullness
str(freq_fullness)
plot(rownames(freq_fullness), freq_fullness$mean)
abline(lm(freq_fullness$mean ~ freq_fullness$freq))
f_dat <- dat |> filter(scroll == 'MT')
freq_fullness <- as.data.frame.matrix(table(f_dat$freq, f_dat$has_vowel_letter))
freq_fullness$mean = freq_fullness$`1` / (freq_fullness$`0` + freq_fullness$`1`)
freq_fullness$freq <- rownames(freq_fullness) |> as.numeric()
freq_fullness
str(freq_fullness)
plot(rownames(freq_fullness), freq_fullness$mean)
abline(lm(freq_fullness$mean ~ freq_fullness$freq))
head(dat)
################################################################################
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
# VERBS WITH ARTICIPLES WITHOUT O SOUND IN MT
NOT_USEFUL_VERBS <- c('ML>[', 'JR>[', '>SP[')
DATASET <- 'ptca_qal.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
dat <- dat |> filter(!lex %in% NOT_USEFUL_VERBS) |> droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
lex_freqs <- as.data.frame(table(dat$lex))
colnames(lex_freqs) <- c('lex', 'freq')
dat <- merge(dat, lex_freqs, by = 'lex', all = TRUE)
dat <- dat[order(dat$tf_id, decreasing = FALSE), ]
head(dat)
dim(dat)
head(dat)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT'))
str(mt_sp)
mt_sp <- droplevels(mt_sp)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
dat$iii_h <- as.factor(as.numeric(substr(dat$lex, 3, 3) == 'H'))
dat$iii_alef <- as.factor(as.numeric(substr(dat$lex, 3, 3) == '>'))
dat$i_nun <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'N'))
head(dat)
str(dat)
# III-he
table(dat$iii_h, dat$has_vowel_letter, dat$law_phase2)
# III->
table(dat$iii_alef, dat$has_vowel_letter, dat$law_phase2)
# I-yod
table(dat$i_yod, dat$has_vowel_letter, dat$law_phase2)
# I-NUN
table(dat$i_nun, dat$has_vowel_letter, dat$law_phase2)
## ALL FIRST LETTERS
dat$first_let <- as.factor(substr(dat$lex, 1, 1))
table(dat$first_let, dat$has_vowel_letter, dat$law_phase2)
dat |> filter(first_let == 'Z')
table(dat$first_let, dat$has_vowel_letter, dat$law_phase2)
table(dat$first_let, dat$has_vowel_letter)
as.data.frame.matrix(table(dat$first_let, dat$has_vowel_letter))
let_df <- as.data.frame.matrix(table(dat$first_let, dat$has_vowel_letter))
let_df$char <- rownames(let_df)
let_df
let_df$mean <- let_df$`1` / (let_df$`0` + let_df$`1`)
let_df$mean <- let_df$`1` / (let_df$`0` + let_df$`1`)
barplot(let_df$char, let_df$mean)
str(let_df)
let_df$char <- rownames(let_df) |> as.factor()
let_df$mean <- let_df$`1` / (let_df$`0` + let_df$`1`)
barplot(let_df$char, let_df$mean)
let_df <- as.data.frame.matrix(table(dat$first_let, dat$has_vowel_letter))
let_df$char <- rownames(let_df) |> as.factor()
let_df$mean <- let_df$`1` / (let_df$`0` + let_df$`1`)
barplot(let_df$char, let_df$mean)
str(let_df)
barplot(let_df$mean)
barplot(let_df$mean, names.arg= let_df$char)
l <- dat |> filter(first_let == 'L') |> droplevels()
table(l$lex, l$has_vowel_letter)
l <- dat |> filter(first_let == 'B') |> droplevels()
table(l$lex, l$has_vowel_letter)
l <- dat |> filter(scroll == 'MT') |> filter(first_let == 'B') |> droplevels()
table(l$lex, l$has_vowel_letter)
table(l$lex, l$has_vowel_letter, l$law_phase2)
l <- dat |> filter(scroll == 'MT') |> filter(first_let == 'N') |> droplevels()
table(l$lex, l$has_vowel_letter, l$law_phase2)
l <- dat |> filter(scroll == 'MT') |> filter(first_let == 'Z') |> droplevels()
table(l$lex, l$has_vowel_letter, l$law_phase2)
l <- dat |> filter(scroll == 'MT') |> filter(first_let == 'R') |> droplevels()
table(l$lex, l$has_vowel_letter, l$law_phase2)
l <- dat |>  filter(first_let == 'R') |> droplevels() # filter(scroll == 'MT') |>
table(l$lex, l$has_vowel_letter, l$law_phase2)
# III-he
table(dat$iii_h, dat$has_vowel_letter, dat$law_phase2)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(ggmcmc)
library(coda)
library(bayestestR) # p_direction
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
DATASET <- 'nouns_adjectives.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dim(dat)
unique(dat$lex)
names(dat)
data.frame(unique(dat$lex))
columns(lex_df) <- c('lexeme')
lex_df <- data.frame(unique(dat$lex))
columns(lex_df) <- c('lexeme')
colnames(lex_df) <- c('lexeme')
lex_df <- data.frame(unique(dat$lex))
colnames(lex_df) <- c('lexeme')
write.csv(lex_df, 'C:/Users/geitb/Downloads/lexemes.csv', row.names=FALSE)
