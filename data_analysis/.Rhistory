colnames(dat)
dat <- dat[!(dat$pattern == '' & dat$scroll == 'MT'),]
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'SP', 'SP', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
levels(dat$law_phase2)
dat[is.na(dat$law_phase2),]
dim(dat)
head(dat)
str(dat)
# DATA EXPLORATION
#install.packages('binom')
library(binom)
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('Pent', 'FP', 'LBH', 'Other', 'Pent_non_QSP',
'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP', 'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=groups)
hpd_fullness
ggplot(data = hpd_fullness, aes(x = law_phase2, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept") +
set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
seed = 123)
return(trace)
}
table(dat$prefix, dat$has_vowel_letter)
table(dat$has_prefix, dat$has_vowel_letter)
mosaicplot(table(dat$has_prefix, dat$has_vowel_letter))
table(dat$has_prefix, dat$has_vowel_letter, dat$law_phase2)
dat <- droplevels(dat)
table(dat$has_prefix, dat$has_vowel_letter)
mosaicplot(table(dat$has_prefix, dat$has_vowel_letter))
table(dat$has_prefix, dat$has_vowel_letter, dat$law_phase2)
formula_mt_dss<- has_vowel_letter ~
has_prefix*law_phase2 +
(has_suffix + has_prefix | scr_book2) +
(has_suffix + has_prefix | lex_type)
bayes_model_mt_dss <- fit_brm_model(dat,
formula_mt_dss,
2000, 4000, 0.95)
formula_mt_dss<- has_vowel_letter ~
has_prefix*law_phase2 +
(has_prefix | scr_book2) +
(has_prefix | lex_type)
bayes_model_mt_dss <- fit_brm_model(dat,
formula_mt_dss,
2000, 4000, 0.95)
bayes_model_mt_dss <- fit_brm_model(dat,
formula_mt_dss,
2000, 4000, 0.97)
summary(bayes_model_mt_dss)
formula_mt_dss<- has_vowel_letter ~
has_prefix*law_phase2
bayes_model_mt_dss <- fit_brm_model(dat,
formula_mt_dss,
2000, 4000, 0.97)
bayes_model_mt_dss <- fit_brm_model(dat,
formula_mt_dss,
2000, 4000, 0.97)
summary(bayes_model_mt_dss)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('1Qisaa', '1QisaaI', '1QisaaII','2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/niph_hiph_pe_yod.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
sum(is.na(dat$pattern))
sum(table(dat$pattern))
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'SP', 'SP', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
levels(dat$law_phase2)
dat[is.na(dat$law_phase2),]
dim(dat)
head(dat)
str(dat)
table(dat$has_prefix, dat$has_vowel_letter)
table(dat$has_suffix, dat$has_vowel_letter)
# DATA EXPLORATION
#install.packages('binom')
library(binom)
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('Pent', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=groups)
hpd_fullness
ggplot(data = hpd_fullness, aes(x = law_phase2, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept") +
set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
seed = 123)
return(trace)
}
table(dat$has_prefix, dat$has_vowel_letter)
table(dat$has_suffix, dat$has_vowel_letter)
table(dat$has_prefix, dat$has_vowel_letter, dat$law_phase2)
dat <- droplevels(dat)
table(dat$has_prefix, dat$has_vowel_letter)
table(dat$has_suffix, dat$has_vowel_letter)
table(dat$has_prefix, dat$has_vowel_letter, dat$law_phase2)
fp <- dat |> filter(law_phase2 == 'FP')
table(dat$has_prefix, dat$has_vowel_letter, dat$book)
table(fp$has_prefix, fp$has_vowel_letter, fp$book)
str_sub(dat$lex, 2, 2)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('1Qisaa', '1QisaaI', '1QisaaII','2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/niph_hiph_pe_yod.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
sum(is.na(dat$pattern))
sum(table(dat$pattern))
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'SP', 'SP', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
levels(dat$law_phase2)
dat[is.na(dat$law_phase2),]
dim(dat)
head(dat)
str(dat)
dat <- droplevels(dat)
str_sub(dat$lex, 2, 2)
dat$second_char <- str_sub(dat$lex, 2, 2)
table(dat$second_char, dat$has_vowel_letter)
dat$second_char <- str_sub(dat$lex, 2, 2)
YOD_VERBS <- c('JVB[', 'JBC[', 'YNQ[', 'JCR[', 'JQY[', 'JLL[', 'JMN[')
dat |> filter(lex %in% YOD_VERBS)
yod <- dat |> filter(lex %in% YOD_VERBS)
table(yod$lex)
table(yod$has_vowel_letter)
table(yod$lex, yod$has_vowel_letter)
yod |> filter(has_vowel_letter == 0)
table(yod$lex, yod$has_vowel_letter)
table(dat$second_char, dat$has_vowel_letter)
dat |> filter(second_char == 'B')
fullness_df <- dat |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
library(binom)
fullness_df <- dat |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
fullness_df
hpd_fullness$secoond_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=fullness_df$second_char)
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
fullness_df <- dat |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$secoond_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
fullness_df <- dat |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$secoond_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
hpd_fullness
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$second_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=second_char, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=second_char, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) #+
sib <- dat |> filter(second_char %in% c('S', 'Y'))
sib <- droplevels(sib)
table(sib$lex, sib$has_vowel_letter)
bet <- dat |> filter(second_char == 'B')
bet <- droplevels(bet)
table(bet$lex, bet$has_vowel_letter)
mem <- dat |> filter(second_char == 'M')
mem <- droplevels(mem)
table(mem$lex, mem$has_vowel_letter)
fullness_df <- dat |> filter(scroll == 'MT') |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$second_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=second_char, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20))
fullness_df <- dat |> filter(scroll != 'MT') |> filter(qsp_sp != 'QSP') |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$second_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=second_char, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20))
fullness_df <- dat |> filter(qsp_sp == 'QSP') |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$second_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=second_char, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20))
fullness_df <- dat |> filter(scroll == 'MT') |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$second_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=second_char, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20))
mem <- dat |> filter(second_char == 'M')
mem <- droplevels(mem)
table(mem$lex, mem$has_vowel_letter)
bet <- dat |> filter(second_char == 'B')
bet <- droplevels(bet)
table(bet$lex, bet$has_vowel_letter)
