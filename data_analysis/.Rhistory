return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/ptcp_qal.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
sum(is.na(dat$pattern))
sum(table(dat$pattern))
sum(dat$pattern == '')
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp <- ifelse(dat$scroll %in% QSP_SCROLLS, 1, 0)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$qsp <- as.factor(dat$qsp)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
dat$iii_h <- as.factor(as.numeric(substr(dat$lex, 3, 3) == 'H'))
head(dat)
dat$special_verbs <- ifelse(dat$ay_ay == 1, 'ay_ay',
ifelse(dat$iii_h == 1, 'iii_h', 'trilit'))
dat$special_verbs <- factor(dat$special_verbs, levels=c('trilit', 'ay_ay', 'iii_h'))
str(dat)
levels(dat$law_phase2)
table(dat$scroll)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT')) # |> filter(book %in% LAW_BOOKS)
mt_sp <- droplevels(mt_sp)
str(mt_sp)
table(mt_sp$type2)
dat <- dat |> droplevels()
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept") +
set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
save_pars = save_pars(all = TRUE),
seed = 123)
return(trace)
}
formula_mt_dss_ptcp3 <- has_vowel_letter ~
has_suffix*law_phase2 +
has_prefix*law_phase2 +
special_verbs*law_phase2 +
(has_suffix + has_prefix | scr_book2) +
(has_suffix + has_prefix | lex_type)
bayes_model_mt_dss_ptcp3 <- fit_brm_model(dat,
formula_mt_dss_ptcp3,
4000, 8000, 0.99)
summary(bayes_model_mt_dss_ptcp3)
ranef(bayes_model_mt_dss_ptcp3)
bayes_R2(bayes_model_mt_dss_ptcp3)
p_direction(bayes_model_mt_dss_ptcp3)
formula_mt_dss_ptcp2 <- has_vowel_letter ~
has_suffix*law_phase2 +
special_verbs*law_phase2 +
(has_suffix | scr_book2) +
(has_suffix | lex_type)
bayes_model_mt_dss_ptcp2 <- fit_brm_model(dat,
formula_mt_dss_ptcp2,
4000, 8000, 0.99)
summary(bayes_model_mt_dss_ptcp2)
ranef(bayes_model_mt_dss_ptcp2)
bayes_R2(bayes_model_mt_dss_ptcp2)
p_direction(bayes_model_mt_dss_ptcp2)
file_path_mt_dss_ptcp <- file.path(MODEL_FOLDER, 'bayes_model_mt_sp_suffix_effect_ptcp.rds')
saveRDS(bayes_model_mt_dss_ptcp2, file = file_path_mt_dss_ptcp)
file_path_mt_dss_ptcp <- file.path(MODEL_FOLDER, 'bayes_model_mt_sp_suffix_prefix_effect_ptcp.rds')
saveRDS(bayes_model_mt_dss_ptcp3, file = file_path_mt_dss_ptcp)
bayes_factor(bayes_model_mt_dss_ptcp2, bayes_model_mt_dss_ptcp3)
bayes_factor(bayes_model_mt_dss_ptcp3, bayes_model_mt_dss_ptcp2)
summary(bayes_model_mt_dss_ptcp3)
p_direction(bayes_model_mt_dss_ptcp3)
formula_mt_dss_ptcp4 <- has_vowel_letter ~
has_suffix*law_phase2 +
special_verbs*law_phase2 +
(has_suffix + has_prefix | scr_book2) +
(has_suffix + has_prefix | lex_type)
bayes_model_mt_dss_ptcp4 <- fit_brm_model(dat,
formula_mt_dss_ptcp4,
4000, 8000, 0.99)
summary(bayes_model_mt_dss_ptcp4)
ranef(bayes_model_mt_dss_ptcp4)
bayes_R2(bayes_model_mt_dss_ptcp4)
p_direction(bayes_model_mt_dss_ptcp4)
bayes_factor(bayes_model_mt_dss_ptcp3, bayes_model_mt_dss_ptcp4)
bayes_factor(bayes_model_mt_dss_ptcp2, bayes_model_mt_dss_ptcp4)
bayes_factor(bayes_model_mt_dss_ptcp4, bayes_model_mt_dss_ptcp2)
#
bayes_factor(bayes_model_mt_dss_ptcp4, bayes_model_mt_dss_ptcp3)
bayes_R2(bayes_model_mt_dss_ptcp4)
p_direction(bayes_model_mt_dss_ptcp4)
file_path_mt_dss_ptcp4 <- file.path(MODEL_FOLDER, 'bayes_model_mt_sp_suffix_prefix4_effect_ptcp.rds')
saveRDS(bayes_model_mt_dss_ptcp4, file = file_path_mt_dss_ptcp4)
summary(bayes_model_mt_dss_ptcp4)
# MAKE TABLE OF SUMMARY WITH PROBAB OF DIRECTION
library(htmlTable)
library(kableExtra)
library(magick)
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs/images_ptcp'
fixed <- summary(trace_mt)$fixed
fixed$Rhat <- sprintf('%.2f', fixed$Rhat)
round_names <- c('Estimate', 'Est.Error', 'l-95% CI', 'u-95% CI')
for (name in round_names) {
fixed[,name] <- fixed[,name] |> round(2)
}
fixed$Bulk_ESS <- round(fixed$Bulk_ESS, 0)
fixed$Tail_ESS <- round(fixed$Tail_ESS, 0)
p_dir <- trace_mt |> p_direction()
fixed$pd <- round(p_dir$pd,2)
fixed |> htmlTable() |>
save_kable(file = file.path(IMAGE_FOLDER, 'ptcp_table.png'))
# MAKE TABLE OF SUMMARY WITH PROBAB OF DIRECTION
library(htmlTable)
library(kableExtra)
library(magick)
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs/images_ptcp'
fixed <- summary(trace_mt)$fixed
trace_mt <- readRDS(file_path_mt_dss_ptcp4)
# MAKE TABLE OF SUMMARY WITH PROBAB OF DIRECTION
library(htmlTable)
library(kableExtra)
library(magick)
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs/images_ptcp'
fixed <- summary(trace_mt)$fixed
fixed$Rhat <- sprintf('%.2f', fixed$Rhat)
round_names <- c('Estimate', 'Est.Error', 'l-95% CI', 'u-95% CI')
for (name in round_names) {
fixed[,name] <- fixed[,name] |> round(2)
}
fixed$Bulk_ESS <- round(fixed$Bulk_ESS, 0)
fixed$Tail_ESS <- round(fixed$Tail_ESS, 0)
p_dir <- trace_mt |> p_direction()
fixed$pd <- round(p_dir$pd,2)
fixed |> htmlTable() |>
save_kable(file = file.path(IMAGE_FOLDER, 'ptcp_table.png'))
model_vars <- get_variables(trace_mt)
model_vars
head(trace_mt)
summary(trace_mt)
fixed_draws <- trace_mt %>%
spread_draws(b_Intercept,
b_law_phase2Pent_SP, b_law_phase2FP, b_law_phase2LBH, b_law_phase2Other,
b_law_phase2Pent_non_QSP, b_law_phase2FP_non_QSP, b_law_phase2LBH_non_QSP, b_law_phase2Other_non_QSP,
b_law_phase2Pent_QSP, b_law_phase2FP_QSP, b_law_phase2Other_QSP,
b_has_suffix1,
`b_has_suffix1:law_phase2Pent_SP`, `b_has_suffix1:law_phase2FP`, `b_has_suffix1:law_phase2LBH`,`b_has_suffix1:law_phase2Other`,
`b_has_suffix1:law_phase2Pent_non_QSP`, `b_has_suffix1:law_phase2FP_non_QSP`, `b_has_suffix1:law_phase2LBH_non_QSP`,`b_has_suffix1:law_phase2Other_non_QSP`,
`b_has_suffix1:law_phase2Pent_QSP`, `b_has_suffix1:law_phase2FP_QSP`, `b_has_suffix1:law_phase2Other_QSP`,
b_special_verbsay_ay, b_special_verbsiii_h,
`b_law_phase2Pent_SP:special_verbsay_ay`, `b_law_phase2FP:special_verbsay_ay`,
`b_law_phase2LBH:special_verbsay_ay`, `b_law_phase2Other:special_verbsay_ay`,
`b_law_phase2Pent_non_QSP:special_verbsay_ay`,  `b_law_phase2FP_non_QSP:special_verbsay_ay`,
`b_law_phase2LBH_non_QSP:special_verbsay_ay`, `b_law_phase2Other_non_QSP:special_verbsay_ay`,
`b_law_phase2Pent_QSP:special_verbsay_ay`,  `b_law_phase2FP_QSP:special_verbsay_ay`,
`b_law_phase2Other_QSP:special_verbsay_ay`, `b_law_phase2Pent_SP:special_verbsiii_h`,
`b_law_phase2FP:special_verbsiii_h`,  `b_law_phase2LBH:special_verbsiii_h`,
`b_law_phase2Other:special_verbsiii_h`, `b_law_phase2Pent_non_QSP:special_verbsiii_h`,
`b_law_phase2FP_non_QSP:special_verbsiii_h`,  `b_law_phase2LBH_non_QSP:special_verbsiii_h`,
`b_law_phase2Other_non_QSP:special_verbsiii_h`, `b_law_phase2Pent_QSP:special_verbsiii_h`,
`b_law_phase2FP_QSP:special_verbsiii_h`,  `b_law_phase2Other_QSP:special_verbsiii_h`,
)
random_intercept <- ranef(trace_mt)$lex_type[,,'Intercept'] |> as.data.frame()
random_intercept <- random_intercept[order(random_intercept$Estimate),]
random_intercept$lex_type <- factor(rownames(random_intercept), levels=rownames(random_intercept))
head(random_intercept, 20)
tail(random_intercept, 20)
dat |> filter(lex == 'GRC[')
dat |> filter(lex == 'GRC[')
dat |> filter(lex == '>XZ[')
bayes_R2(bayes_model_mt_dss_ptcp4)
table(dat$has_suffix, dat$has_vowel_letter)
table(dat$has_prefix, dat$has_vowel_letter)
table(dat$has_prefix, dat$has_vowel_letter, dat$law_phase2)
fixed_draws <- trace_mt %>%
spread_draws(b_Intercept,
b_law_phase2Pent_SP, b_law_phase2FP, b_law_phase2LBH, b_law_phase2Other,
b_law_phase2Pent_non_QSP, b_law_phase2FP_non_QSP, b_law_phase2LBH_non_QSP, b_law_phase2Other_non_QSP,
b_law_phase2Pent_QSP, b_law_phase2FP_QSP, b_law_phase2Other_QSP,
b_has_suffix1,
`b_has_suffix1:law_phase2Pent_SP`, `b_has_suffix1:law_phase2FP`, `b_has_suffix1:law_phase2LBH`,`b_has_suffix1:law_phase2Other`,
`b_has_suffix1:law_phase2Pent_non_QSP`, `b_has_suffix1:law_phase2FP_non_QSP`, `b_has_suffix1:law_phase2LBH_non_QSP`,`b_has_suffix1:law_phase2Other_non_QSP`,
`b_has_suffix1:law_phase2Pent_QSP`, `b_has_suffix1:law_phase2FP_QSP`, `b_has_suffix1:law_phase2Other_QSP`,
b_special_verbsay_ay, b_special_verbsiii_h,
`b_law_phase2Pent_SP:special_verbsay_ay`, `b_law_phase2FP:special_verbsay_ay`,
`b_law_phase2LBH:special_verbsay_ay`, `b_law_phase2Other:special_verbsay_ay`,
`b_law_phase2Pent_non_QSP:special_verbsay_ay`,  `b_law_phase2FP_non_QSP:special_verbsay_ay`,
`b_law_phase2LBH_non_QSP:special_verbsay_ay`, `b_law_phase2Other_non_QSP:special_verbsay_ay`,
`b_law_phase2Pent_QSP:special_verbsay_ay`,  `b_law_phase2FP_QSP:special_verbsay_ay`,
`b_law_phase2Other_QSP:special_verbsay_ay`, `b_law_phase2Pent_SP:special_verbsiii_h`,
`b_law_phase2FP:special_verbsiii_h`,  `b_law_phase2LBH:special_verbsiii_h`,
`b_law_phase2Other:special_verbsiii_h`, `b_law_phase2Pent_non_QSP:special_verbsiii_h`,
`b_law_phase2FP_non_QSP:special_verbsiii_h`,  `b_law_phase2LBH_non_QSP:special_verbsiii_h`,
`b_law_phase2Other_non_QSP:special_verbsiii_h`, `b_law_phase2Pent_QSP:special_verbsiii_h`,
`b_law_phase2FP_QSP:special_verbsiii_h`,  `b_law_phase2Other_QSP:special_verbsiii_h`,
)
head(fixed_draws)
summary_last_suffix_dss <- fixed_draws %>%
transmute('Intercept non-QSP Pentateuch' = b_Intercept + b_law_phase2Pent_non_QSP,
'With Suffix non-QSP Pentateuch' = b_Intercept + b_law_phase2Pent_non_QSP + b_has_suffix1 + `b_has_suffix1:law_phase2Pent_non_QSP`,
'Intercept non-QSP Former Prophets' = b_Intercept + b_law_phase2FP_non_QSP,
'With Suffix non-QSP Former Prophets' = b_Intercept + b_law_phase2FP_non_QSP + b_has_suffix1 + `b_has_suffix1:law_phase2FP_non_QSP`,
'Intercept non-QSP LBH' = b_Intercept + b_law_phase2LBH_non_QSP,
'With Suffix non-QSP LBH' = b_Intercept + b_law_phase2LBH_non_QSP + b_has_suffix1 + `b_has_suffix1:law_phase2LBH_non_QSP`,
'Intercept non-QSP Other' = b_Intercept + b_law_phase2Other_non_QSP,
'With Suffix non-QSP Other' = b_Intercept + b_law_phase2Other_non_QSP + b_has_suffix1 + `b_has_suffix1:law_phase2Other_non_QSP`,
'Intercept QSP Pentateuch' = b_Intercept + b_law_phase2Pent_QSP,
'With Suffix QSP Pentateuch' = b_Intercept + b_law_phase2Pent_QSP + b_has_suffix1 + `b_has_suffix1:law_phase2Pent_QSP`,
'Intercept QSP Former Prophets' = b_Intercept + b_law_phase2FP_QSP,
'With Suffix QSP Former Prophets' = b_Intercept + b_law_phase2FP_QSP + b_has_suffix1 + `b_has_suffix1:law_phase2FP_QSP`,
'Intercept QSP Other' = b_Intercept + b_law_phase2Other_QSP,
'With Suffix QSP Other' = b_Intercept + b_law_phase2Other_QSP + b_has_suffix1 + `b_has_suffix1:law_phase2Other_QSP`,
) %>%
gather() %>%
group_by(key) %>%
mean_hdi(.width = c(.95, .66))
labels_suffix_dss <- c(
'With Suffix QSP Other',
'Intercept QSP Other',
'With Suffix QSP Former Prophets',
'Intercept QSP Former Prophets',
'With Suffix QSP Pentateuch',
'Intercept QSP Pentateuch',
'With Suffix non-QSP Other',
'Intercept non-QSP Other',
'With Suffix non-QSP LBH',
'Intercept non-QSP LBH',
'With Suffix non-QSP Former Prophets',
'Intercept non-QSP Former Prophets',
'With Suffix non-QSP Pentateuch',
'Intercept non-QSP Pentateuch'
)
summary_last_suffix_dss$key <- factor(summary_last_suffix_dss$key, levels = labels_suffix_dss)
summary_last_suffix_dss %>%
ggplot(aes(y = key, x = value, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Logodds of a vowel letter in the last syllable of a ptcp with or without a suffix in DSS')
#MT SP
summary_last_lam_he <- fixed_draws %>%
transmute('Intercept MT Pentateuch' = b_Intercept,
'Lamed-he verbs MT Pentateuch' = b_Intercept + b_special_verbsay_ay,
'Intercept SP' = b_Intercept + b_law_phase2Pent_SP,
'Lamed-he verbs SP' = b_Intercept + b_law_phase2Pent_SP + b_special_verbsiii_h + `b_law_phase2Pent_SP:special_verbsiii_h`,
'Intercept MT Former Prophets' = b_Intercept + b_law_phase2FP,
'Lamed-he verbs MT Former Prophets' = b_Intercept + b_law_phase2FP + b_special_verbsiii_h + `b_law_phase2FP:special_verbsiii_h`,
'Intercept MT LBH' = b_Intercept + b_law_phase2LBH,
'Lamed-he verbs MT LBH' = b_Intercept + b_law_phase2LBH + b_special_verbsiii_h + `b_law_phase2LBH:special_verbsiii_h`,
'Intercept MT Other' = b_Intercept + b_law_phase2Other,
'Lamed-he verbs MT Other' = b_Intercept + b_law_phase2Other + b_special_verbsiii_h + `b_law_phase2Other:special_verbsiii_h`,
) %>%
gather() %>%
group_by(key) %>%
mean_hdi(.width = c(.95, .66))
labels_lam_he <- c(
'Lamed-he verbs MT Other',
'Intercept MT Other',
'Lamed-he verbs MT LBH',
'Intercept MT LBH',
'Lamed-he verbs MT Former Prophets',
'Intercept MT Former Prophets',
'Lamed-he verbs SP',
'Intercept SP',
'Lamed-he verbs MT Pentateuch',
'Intercept MT Pentateuch'
)
summary_last_lam_he$key <- factor(summary_last_lam_he$key, levels = labels_lam_he)
summary_last_lam_he %>%
ggplot(aes(y = key, x = value, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Logodds of a vowel letter in the last syllable of a ptcp in lamed-he and other verbs in MT and SP')
summary_last_ay_ay <- fixed_draws %>%
transmute('Intercept MT Pentateuch' = b_Intercept,
'Ayin-ayin verbs MT Pentateuch' = b_Intercept + b_special_verbsay_ay,
'Intercept SP' = b_Intercept + b_law_phase2Pent_SP,
'Ayin-ayin verbs SP' = b_Intercept + b_law_phase2Pent_SP + b_special_verbsay_ay + `b_law_phase2Pent_SP:special_verbsay_ay`,
'Intercept MT Former Prophets' = b_Intercept + b_law_phase2FP,
'Ayin-ayin verbs MT Former Prophets' = b_Intercept + b_law_phase2FP + b_special_verbsay_ay + `b_law_phase2FP:special_verbsay_ay`,
'Intercept MT LBH' = b_Intercept + b_law_phase2LBH,
'Ayin-ayin verbs MT LBH' = b_Intercept + b_law_phase2LBH + b_special_verbsay_ay + `b_law_phase2LBH:special_verbsay_ay`,
'Intercept MT Other' = b_Intercept + b_law_phase2Other,
'Ayin-ayin verbs MT Other' = b_Intercept + b_law_phase2Other + b_special_verbsay_ay + `b_law_phase2Other:special_verbsay_ay`,
) %>%
gather() %>%
group_by(key) %>%
mean_hdi(.width = c(.95, .66))
labels_ay_ay <- c(
'Ayin-ayin verbs MT Other',
'Intercept MT Other',
'Ayin-ayin verbs MT LBH',
'Intercept MT LBH',
'Ayin-ayin verbs MT Former Prophets',
'Intercept MT Former Prophets',
'Ayin-ayin verbs SP',
'Intercept SP',
'Ayin-ayin verbs MT Pentateuch',
'Intercept MT Pentateuch'
)
summary_last_ay_ay$key <- factor(summary_last_ay_ay$key, levels = labels_ay_ay)
summary_last_ay_ay %>%
ggplot(aes(y = key, x = value, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Logodds of a vowel letter in the last syllable of a ptcp in ayin-ayin and other verbs in MT and SP')
summary_last_suffix <- fixed_draws %>%
transmute('Intercept MT Pentateuch' = b_Intercept,
'With Suffix MT Pentateuch' = b_Intercept + b_has_suffix1,
'Intercept SP' = b_Intercept + b_law_phase2Pent_SP,
'With Suffix SP' = b_Intercept + b_law_phase2Pent_SP + b_has_suffix1 + `b_has_suffix1:law_phase2Pent_SP`,
'Intercept MT Former Prophets' = b_Intercept + b_law_phase2FP,
'With Suffix MT Former Prophets' = b_Intercept + b_law_phase2FP + b_has_suffix1 + `b_has_suffix1:law_phase2FP`,
'Intercept MT LBH' = b_Intercept + b_law_phase2LBH,
'With Suffix MT LBH' = b_Intercept + b_law_phase2LBH + b_has_suffix1 + `b_has_suffix1:law_phase2LBH`,
'Intercept MT Other' = b_Intercept + b_law_phase2Other,
'With Suffix MT Other' = b_Intercept + b_law_phase2Other + b_has_suffix1 + `b_has_suffix1:law_phase2Other`,
) %>%
gather() %>%
group_by(key) %>%
mean_hdi(.width = c(.95, .66))
labels_suffix <- c(
'With Suffix MT Other',
'Intercept MT Other',
'With Suffix MT LBH',
'Intercept MT LBH',
'With Suffix MT Former Prophets',
'Intercept MT Former Prophets',
'With Suffix SP',
'Intercept SP',
'With Suffix MT Pentateuch',
'Intercept MT Pentateuch'
)
summary_last_suffix$key <- factor(summary_last_suffix$key, levels = labels_suffix)
summary_last_suffix %>%
ggplot(aes(y = key, x = value, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Logodds of a vowel letter in the last syllable of a ptcp with or without a suffix in MT and SP')
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR) # p_direction
library(binom)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'1Qisaa', '4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/ptcp_qal.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
sum(is.na(dat$pattern))
sum(table(dat$pattern))
sum(dat$pattern == '')
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp <- ifelse(dat$scroll %in% QSP_SCROLLS, 1, 0)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$qsp <- as.factor(dat$qsp)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
dat$iii_h <- as.factor(as.numeric(substr(dat$lex, 3, 3) == 'H'))
head(dat)
dat$special_verbs <- ifelse(dat$ay_ay == 1, 'ay_ay',
ifelse(dat$iii_h == 1, 'iii_h', 'trilit'))
dat$special_verbs <- factor(dat$special_verbs, levels=c('trilit', 'ay_ay', 'iii_h'))
str(dat)
levels(dat$law_phase2)
table(dat$scroll)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT')) # |> filter(book %in% LAW_BOOKS)
mt_sp <- droplevels(mt_sp)
str(mt_sp)
table(mt_sp$type2)
dat <- dat |> droplevels()
dat |> filter(lex == 'BRK[')
brk <- dat |> filter(lex == 'BRK[')
table(brk$has_vowel_letter)
brk |> filter(has_vowel_letter == 1)
brk |> filter(has_vowel_letter == 0)
brk <- dat |> filter(lex == 'BRK[') |> filter(scroll == 'MT')
table(brk$has_vowel_letter)
brk <- dat |> filter(lex == '>RR[') |> filter(scroll == 'MT')
table(brk$has_vowel_letter)
brk |> filter(has_vowel_letter == 0)
brk <- dat |> filter(lex == '>RR[') # |> filter(scroll == 'MT')
table(brk$has_vowel_letter)
brk |> filter(has_vowel_letter == 0)
brk_no_mt <- dat |> filter(lex == 'BRK[') |> filter(scroll != 'MT')
table(brk_no_mt$has_vowel_letter)
brk <- dat |> filter(lex == 'BRK[') |> filter(scroll == 'MT')
table(brk$has_vowel_letter)
brk_no_mt <- dat |> filter(lex == 'BRK[') |> filter(scroll != 'MT')
table(brk_no_mt$has_vowel_letter)
head(brk_no_mt)
tail(brk_no_mt)
brk_no_mt |> filter(has_vowel_letter == 0)
brk <- dat |> filter(lex == '>RR[') |> filter(scroll == 'MT')
table(brk$has_vowel_letter)
brk <- dat |> filter(lex == '>RR[') |> filter(scroll != 'MT')
table(brk$has_vowel_letter)
tail(brk)
