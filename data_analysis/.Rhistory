dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp <- ifelse(dat$scroll %in% QSP_SCROLLS, 1, 0)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$qsp <- as.factor(dat$qsp)
head(dat)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS & dat$scroll == 'MT', 0,
ifelse(dat$book %in% LAW_BOOKS & dat$scroll == 'SP', 1,
ifelse(dat$book %in% EBH_BOOKS, 2,
ifelse(dat$book %in% LBH_BOOKS, 3,
4))))
dat$law_phase2 <- as.factor(dat$law_phase2)
mt_sp_complete <- dat |> filter(scroll %in% c('MT', 'SP'))
variation_lex_type_list <- list()
for (lex_t in unique(mt_sp_complete$lex_type)) {
lex_type_df <- mt_sp_complete %>% filter(lex_type == lex_t)
lt_vowels <- unique(lex_type_df$has_vowel_letter)
if (length(lt_vowels) > 1) {
variation_lex_type_list[[lex_t]] <- lex_type_df
}
}
mt_sp_complete_var <- do.call('rbind', variation_lex_type_list)
mt_sp_complete_var <- mt_sp_complete_var[order(mt_sp_complete_var$tf_id),]
mt_sp_complete_var <- droplevels(mt_sp_complete_var)
head(mt_sp_complete_var)
dim(mt_sp_complete_var)
table(mt_sp_complete_var$scroll)
table(mt_sp_complete_var$law_phase2)
str(mt_sp_complete_var)
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept") +
set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
seed = 123)
return(trace)
}
formula_mt_sp_complete <- has_vowel_letter ~
has_suffix*type2*law_phase2 +
has_prefix*type2*law_phase2 +
(has_suffix + has_prefix | scr_book2) +
(has_suffix + has_prefix | lex_type)
file_path_mt_sp_complete <- file.path(MODEL_FOLDER, 'bayes_model_mt_sp_affix_effect_complete.rds')
trace_mt <- readRDS(file_path_mt_sp_complete)
summary(trace_mt)
library(tidyverse)
list.files()
source(file.path('./analysis_nouns_adjectives', 'config.R'))
FACTOR_COLUMNS <- c('has_prefix', 'has_prs', 'has_nme', 'has_hloc',
'has_suffix', 'neigh_vowel_letter','lex', 'book',
'has_vowel_letter', 'lex_type', 'law_phase', 'scroll',
'scr_book2', 'qsp', 'qsp_sp')
prepare_data_pipeline <- function(df, col_name, values) {
df <- df %>% make_lex_type_column |>
make_has_suffix_column |>
make_type2_column |>
make_second_book_column |>
make_law_phase_column |>
make_second_book_column |>
split_great_scroll |>
make_scroll_book2_column |>
make_qsp_column |>
make_qsp_sp_column |>
select_data(col_name, values) |>
reorder_syllable_type_levels |>
select_lex_type_data_with_variation |>
make_factor_columns(FACTOR_COLUMNS)
return(df)
}
prepare_data_pipeline <- function(df, col_name, values) {
df <- df %>% make_lex_type_column |>
make_has_suffix_column |>
make_type2_column |>
make_second_book_column |>
make_law_phase_column |>
make_second_book_column |>
split_great_scroll |>
make_scroll_book2_column |>
#make_qsp_column |>
#make_qsp_sp_column |>
select_data(col_name, values) |>
reorder_syllable_type_levels |>
select_lex_type_data_with_variation |>
make_factor_columns(FACTOR_COLUMNS)
return(df)
}
prepare_data_pipeline <- function(df, col_name, values) {
df <- df %>% make_lex_type_column %>%
make_has_suffix_column %>%
make_type2_column %>%
make_second_book_column %>%
make_law_phase_column %>%
make_second_book_column %>%
split_great_scroll %>%
make_scroll_book2_column %>%
make_qsp_column %>%
make_qsp_sp_column %>%
select_data(col_name, values) %>%
reorder_syllable_type_levels %>%
select_lex_type_data_with_variation %>%
make_factor_columns(FACTOR_COLUMNS)
return(df)
}
getwd()
#source(file.path(scripts_folder, 'data_preparation.R'))
source('data_preparation.R')
listdir()
list.dirs()
list.files()
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
dat_prepared <- prepare_data_pipeline(dat, 'scroll', c('MT'))
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
}
main()
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
dat_prepared <- prepare_data_pipeline(dat, 'scroll', c('MT'))
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
}
main()
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
dat_prepared <- prepare_data_pipeline(dat, 'scroll', c('MT'))
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
}
main()
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
dat_prepared <- prepare_data_pipeline(dat, 'scroll', c('MT'))
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
#print(dim(dat_prepared))
}
main()
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
dat_prepared <- prepare_data_pipeline(dat, 'scroll', c('MT'))
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
#print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
dim(dat)
table(dat$scroll)
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', c('MT'))
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
#print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
main <- function() {
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
#print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
dim(dat)
table(dat$scroll)
table(dat$scroll)
aa
)
dat <- main()
str(dat)
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
#print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
return(dat_prepared)
}
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
dim(dat)
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_var7.rds'
main <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
#brm_model <- fit_brm_model(dat_prepared, formula7)
#save_model(brm_model, MODEL_FOLDER, model_name)
print(dim(dat_prepared))
return(dat_prepared)
}
dat <- main()
str(dat)
table(dat$scr_book2)
print(table(dat$qsp, dat$qsp_sp))
dat <- main_preparation()
main_preparation <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
return(dat_prepared)
}
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
source(file.path('./analysis_nouns_adjectives/data_modeling', 'models.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_sp_dss_affix_effect.rds'
main_preparation <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
print(table(dat$scroll))
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
return(dat_prepared)
}
model_data <- function(df_prepared, formula, warmup, iter, adapt_delta) {
brm_model <- fit_brm_model(df_prepared,
formula,
warmup, iter, adapt_delta)
save_model(brm_model, MODEL_FOLDER, model_name)
}
dat <- main_preparation()
main_preparation <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
return(dat_prepared)
}
main_preparation <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
return(dat_prepared)
}
model_data <- function(df_prepared, formula, warmup, iter, adapt_delta) {
brm_model <- fit_brm_model(df_prepared,
formula,
warmup, iter, adapt_delta)
save_model(brm_model, MODEL_FOLDER, model_name)
}
dat <- main_preparation()
print(dim(dat))
print(table(dat$qsp, dat$qsp_sp))
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(ggmcmc)
library(coda)
library(bayestestR) # p_direction
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/nouns_adjectives/images_nouns_adjv'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS <- c('2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'1Qisaa', '4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
logit2odds <- function(logit){
odds <- exp(logit)
return(odds)
}
text_sizes = theme(
plot.title = element_text(size = 20),
axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.title.y = element_blank(),
axis.text.y = element_text(size = 20))
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/nouns_adjectives.csv', sep='\t')
dim(dat)
str(dat)
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$neigh_vowel_letter <- as.factor(dat$neigh_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp <- ifelse(dat$scroll %in% QSP_SCROLLS, 1, 0)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
dat$scroll <- as.factor(dat$scroll)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$qsp <- as.factor(dat$qsp)
head(dat)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS & dat$scroll == 'MT', 0,
ifelse(dat$book %in% LAW_BOOKS & dat$scroll == 'SP', 1,
ifelse(dat$book %in% EBH_BOOKS, 2,
ifelse(dat$book %in% LBH_BOOKS, 3,
4))))
dat$law_phase2 <- as.factor(dat$law_phase2)
dat$qsp_sp <- ifelse(dat$qsp == 1, 'QSP',
ifelse(dat$scroll == 'SP', 'SP',
'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
str(dat)
levels(dat$scr_book2)
table(dat$qsp, dat$qsp_sp)
################################################################################
lex_df <- dat$lex |> unique() |> as.data.frame()
variation_lex_type_list <- list()
for (lex_t in unique(dat$lex_type)) {
lex_type_df <- dat %>% filter(lex_type == lex_t)
lt_vowels <- unique(lex_type_df$has_vowel_letter)
if (length(lt_vowels) > 1) {
variation_lex_type_list[[lex_t]] <- lex_type_df
}
}
mt_var <- do.call('rbind', variation_lex_type_list)
mt_var <- mt_var[order(mt_var$tf_id),]
head(mt_var)
levels(mt_var$type)
dim(mt_var)
source(file.path('./analysis_nouns_adjectives/data_modeling', 'data_preparation.R'))
source(file.path('./analysis_nouns_adjectives/data_modeling', 'models.R'))
DATASET<- 'nouns_adjectives.csv'
MODEL_FOLDER <- './analysis_nouns_adjectives/output/models'
MODEL_NAME <- 'bayes_model_mt_sp_dss_affix_effect.rds'
main_preparation <- function() {
dat <- read.csv(file.path('../data', DATASET), sep = '\t')
dat_prepared <- prepare_data_pipeline(dat, 'scroll', 'NO')
return(dat_prepared)
}
model_data <- function(df_prepared, formula, warmup, iter, adapt_delta) {
brm_model <- fit_brm_model(df_prepared,
formula,
warmup, iter, adapt_delta)
save_model(brm_model, MODEL_FOLDER, model_name)
}
dat <- main_preparation()
print(dim(dat))
print(table(dat$qsp, dat$qsp_sp))
model_data(dat,
formula_mt_sp_dss,
6000, 12000, 0.95)
summary(brm_model)
