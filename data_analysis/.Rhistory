five_books_sp <- five_books_df |> filter(scroll == 'MT')
str(five_books_sp)
five_books_sp$has_vowel_letter <- as.numeric(as.character(five_books_sp$has_vowel_letter))
tapply(five_books_sp$has_vowel_letter, five_books_sp$book, mean)
library(tidyverse)
library(lme4)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'1Qisaa', '4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
data_folder <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data'
dat <- read.csv(file.path(data_folder, 'nouns_adjectives.csv'), sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
sum(is.na(dat$pattern))
sum(table(dat$pattern))
dat$has_suffix <- dat$has_prs | dat$has_nme
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_suffix <- as.factor(dat$has_suffix)
dat$has_nme <- as.factor(dat$has_nme)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$lex_type <- paste(dat$lex, dat$type, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$neigh_vowel_letter <- as.factor(dat$neigh_vowel_letter)
dat$scr_lex_type <- paste(dat$scroll, dat$lex, dat$type, sep='_')
dat$scr_lex_type <- as.factor(dat$scr_lex_type)
dat$book2 <- dat$book %>% str_replace('1_', '') %>% str_replace('2_', '')
table(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp <- ifelse(dat$scroll %in% QSP_SCROLLS, 1, 0)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
head(dat)
dim(dat)
dat_pent <- dat |>
filter(scroll %in% c('MT', 'SP')) |>
filter(book %in% LAW_BOOKS)
dat_pent$scr_book <- str_c(dat_pent$scroll, dat_pent$book, sep='_')
head(dat_pent)
str(dat_pent)
select_variable_lex_types <- function(df) {
variation_lex_type_list <- list()
for (lex_t in unique(df$lex_type)) {
lex_type_df <- df %>% filter(lex_type == lex_t)
lt_vowels <- unique(lex_type_df$has_vowel_letter)
if (length(lt_vowels) > 1) {
variation_lex_type_list[[lex_t]] <- lex_type_df
}
}
var_lex_type_df <- do.call('rbind', variation_lex_type_list)
var_lex_type_df <- var_lex_type_df[order(var_lex_type_df$tf_id),]
return(var_lex_type_df)
}
dat_pent_selected <- select_variable_lex_types(dat_pent)
# EXPLORATION
dat_pent_selected <- droplevels(dat_pent_selected)
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
#prior = set_prior("normal(0, 5)", class = "Intercept") #+
#set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
seed = 123)
return(trace)
}
colnames(dat_pent_selected)
dim(dat_pent_selected)
table(dat_pent_selected$neigh_vowel_letter, dat_pent_selected$has_vowel_letter, dat_pent_selected$type)
formula_pent_type <- has_vowel_letter ~
has_prs*type + has_nme*type + has_prefix*type + neigh_vowel_letter*type +
(has_prs + has_nme + has_prefix + neigh_vowel_letter | scr_book/lex_type)
file_path_type <- file.path(MODEL_FOLDER, 'sp_mt_affixes_neigh.rds')
trace_pent <- readRDS(file_path_type)
model_vars
model_vars <- get_variables(trace_pent_type)
model_vars
trace_pent_type <- readRDS(file_path_type)
model_vars <- get_variables(trace_pent_type)
model_vars
fixed_draws_last <- trace_pent %>%
spread_draws(b_Intercept,
b_has_prefix1, b_has_prs1, b_has_nme1, b_neigh_vowel_letter1,
)
head(fixed_draws_last)
last_intercept <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept, .width = c(.95, .66))
last_intercept$feature <- 'Intercept'
last_nme <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_has_nme1, .width = c(.95, .66))
last_nme$feature <- 'With Nominal Ending'
last_prs <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_has_prs1, .width = c(.95, .66))
last_prs$feature <- 'With Pronominal Suffix'
last_prefix <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_has_prefix1, .width = c(.95, .66))
last_prefix$feature <- 'With Prefix'
last_neighbor <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_neigh_vowel_letter1, .width = c(.95, .66))
last_prefix$feature <- 'With vowel letter in neigboring syllable'
fixed_last_syll <- rbind(last_intercept, last_nme, last_prs, last_prefix, last_neighbor)
last_neighbor <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_neigh_vowel_letter1, .width = c(.95, .66))
last_prefix$feature <- 'With vowel letter in neigboring syllable'
fixed_last_syll <- rbind(last_intercept, last_nme, last_prs, last_prefix, last_neighbor)
last_intercept <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept, .width = c(.95, .66))
last_intercept$feature <- 'Intercept'
last_nme <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_has_nme1, .width = c(.95, .66))
last_nme$feature <- 'With Nominal Ending'
last_prs <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_has_prs1, .width = c(.95, .66))
last_prs$feature <- 'With Pronominal Suffix'
last_prefix <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_has_prefix1, .width = c(.95, .66))
last_prefix$feature <- 'With Prefix'
last_neighbor <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_neigh_vowel_letter1, .width = c(.95, .66))
last_prefix$feature <- 'With vowel letter in neigboring syllable'
last_neighbor
last_prefix
last_prefix$feature <- 'With vowel letter in neigboring syllable'
last_prefix
last_neighbor
last_prefix <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_has_prefix1, .width = c(.95, .66))
last_prefix$feature <- 'With Prefix'
last_neighbor <- fixed_draws_last %>%
median_qi(condition_mean = b_Intercept + b_neigh_vowel_letter1, .width = c(.95, .66))
last_neighbor$feature <- 'With vowel letter in neigboring syllable'
last_prefix
last_neighbor
fixed_last_syll <- rbind(last_intercept, last_nme, last_prs, last_prefix, last_neighbor)
fixed_last_syll
fixed_last_syll$feature <- factor(fixed_last_syll$feature, levels = c('With vowel letter in neigboring syllable',
'With Prefix',
'With Pronominal Suffix',
'With Nominal Ending',
'Intercept'))
fixed_last_syll %>%
ggplot(aes(y = feature, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Probability of a vowel letter in the last syllable in MT Pentateuch and SP')
model_vars
fixed_draws_first <- trace_pent %>%
spread_draws(b_Intercept,
b_typefirst,
`b_typefirst:has_nme1`,
`b_typefirst:has_prefix1`,
`b_has_prs1:typefirst`,
`b_typefirst:neigh_vowel_letter1`,
b_has_prefix1, b_has_prs1, b_has_nme1, b_neigh_vowel_letter1,
)
head(fixed_draws_first)
first_intercept <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst, .width = c(.95, .66))
first_intercept$feature <- 'Intercept'
first_nme <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst + b_has_nme1 + `b_typefirst:has_nme1`, .width = c(.95, .66))
first_nme$feature <- 'With Nominal Ending'
first_prs <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst + b_has_prs1 + `b_has_prs1:typefirst`, .width = c(.95, .66))
first_prs$feature <- 'With Pronominal Suffix'
first_prefix <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst + b_has_prefix1 + `b_typefirst:has_prefix1`, .width = c(.95, .66))
first_prefix$feature <- 'With Prefix'
first_intercept <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst, .width = c(.95, .66))
first_intercept$feature <- 'Intercept'
first_nme <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst + b_has_nme1 + `b_typefirst:has_nme1`, .width = c(.95, .66))
first_nme$feature <- 'With Nominal Ending'
first_prs <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst + b_has_prs1 + `b_has_prs1:typefirst`, .width = c(.95, .66))
first_prs$feature <- 'With Pronominal Suffix'
first_prefix <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst + b_has_prefix1 + `b_typefirst:has_prefix1`, .width = c(.95, .66))
first_prefix$feature <- 'With Prefix'
first_neighbor <- fixed_draws_first %>%
median_qi(condition_mean = b_Intercept + b_typefirst + b_neigh_vowel_letter1 + `b_typefirst:neigh_vowel_letter1`, .width = c(.95, .66))
first_neighbor$feature <- 'With Prefix'
first_neighbor$feature <- 'With vowel letter in neigboring syllable'
fixed_first_syll <- rbind(first_intercept, first_nme, first_prs, first_prefix, first_neighbor)
fixed_first_syll
fixed_first_syll$feature <- factor(fixed_first_syll$feature, levels = c('With vowel letter in neigboring syllable', 'With Prefix', 'With Pronominal Suffix', 'With Nominal Ending', 'Intercept'))
fixed_first_syll %>%
ggplot(aes(y = feature, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Probability of a vowel letter in the first syllable in MT Pentateuch and SP')
model_vars
fixed_draws_single <- trace_pent %>%
spread_draws(b_Intercept,
b_typesingle, `b_typesingle:has_nme1`, `b_typesingle:has_prefix1`,
`b_has_prs1:typesingle`, `b_typesingle:neigh_vowel_letter1`,
b_has_prefix1, b_has_prs1, b_has_nme1,
)
fixed_draws_single <- trace_pent %>%
spread_draws(b_Intercept,
b_typesingle, `b_typesingle:has_nme1`, `b_typesingle:has_prefix1`,
`b_has_prs1:typesingle`, `b_typesingle:neigh_vowel_letter1`,
b_has_prefix1, b_has_prs1, b_has_nme1, b_neigh_vowel_letter1,
)
head(fixed_draws_single)
single_intercept <- fixed_draws_single %>%
median_qi(condition_mean = b_Intercept + b_typesingle, .width = c(.95, .66))
single_intercept$feature <- 'Intercept'
single_nme <- fixed_draws_single %>%
median_qi(condition_mean = b_Intercept + b_typesingle + b_has_nme1 + `b_typesingle:has_nme1`, .width = c(.95, .66))
single_nme$feature <- 'With Nominal Ending'
single_prs <- fixed_draws_single %>%
median_qi(condition_mean = b_Intercept + b_typesingle + b_has_prs1 + `b_has_prs1:typesingle`, .width = c(.95, .66))
single_prs$feature <- 'With Pronominal Suffix'
single_prefix <- fixed_draws_single %>%
median_qi(condition_mean = b_Intercept + b_typesingle + b_has_prefix1 + `b_typesingle:has_prefix1`, .width = c(.95, .66))
single_prefix$feature <- 'With Prefix'
single_neighbor <- fixed_draws_single %>%
median_qi(condition_mean = b_Intercept + b_typesingle + b_neigh_vowel_letter1 + `b_typesingle:neigh_vowel_letter1`, .width = c(.95, .66))
single_neighbor$feature <- 'With vowel letter in neigboring syllable'
fixed_single_syll <- rbind(single_intercept, single_nme, single_prs, single_prefix, single_neighbor)
fixed_single_syll
fixed_single_syll$feature <- factor(fixed_single_syll$feature, levels = c('With vowel letter in neigboring syllable', 'With Prefix', 'With Pronominal Suffix', 'With Nominal Ending', 'Intercept'))
fixed_single_syll %>%
ggplot(aes(y = feature, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Probability of a vowel letter in the single syllable in MT Pentateuch and SP')
intercept_last <- data_wide |>
median_qi(condition_mean = Intercept, .width = c(.95, .66))
# Last with prefix
prefix_effect_last <- data_wide |>
median_qi(condition_mean = Intercept + has_prefix1, .width = c(.95, .66))
intercept_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable intercept')
intercept_last <- data_wide |>
median_qi(condition_mean = Intercept, .width = c(.95, .66))
mt_draws_random_scr_book <- trace_pent %>%
spread_draws(r_scr_book[scr_book,term])
###############################
data_wide <- spread(mt_draws_random_scr_book, term, r_scr_book)
intercept_last <- data_wide |>
median_qi(condition_mean = Intercept, .width = c(.95, .66))
# Last with prefix
prefix_effect_last <- data_wide |>
median_qi(condition_mean = Intercept + has_prefix1, .width = c(.95, .66))
intercept_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable intercept')
unique(dat_pent_selected$scr_book)
rev(unique(dat_pent_selected$scr_book))
scr_books <- rev(unique(dat_pent_selected$scr_book))
data_wide$scr_book <- factor(data_wide$scr_book, levels=scr_books)
intercept_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable intercept')
###############################
data_wide <- spread(mt_draws_random_scr_book, term, r_scr_book)
scr_books <- rev(unique(dat_pent_selected$scr_book))
data_wide$scr_book <- factor(data_wide$scr_book, levels=scr_books)
intercept_last <- data_wide |>
median_qi(condition_mean = Intercept, .width = c(.95, .66))
# Last with prefix
prefix_effect_last <- data_wide |>
median_qi(condition_mean = Intercept + has_prefix1, .width = c(.95, .66))
intercept_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable intercept')
prefix_effect_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable with prefix')
intercept_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable intercept')
prefix_effect_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable with prefix')
# Last with nme
nme_effect_last <- data_wide |>
median_qi(condition_mean = has_nme1, .width = c(.95, .66))
nme_effect_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable with nme')
# Last with prs
prs_effect_last <- data_wide |>
median_qi(condition_mean = Intercept + has_prs1, .width = c(.95, .66))
prs_effect_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable with prs')
prs_effect_last
prs_effect_last$scr_book <- prs_effect_last$scr_book |> str_c('_with_prs')
intercept_last$scr_book <- intercept_last$scr_book
prs_last_df <- rbind(prs_effect_last, intercept_last)
prs_last_df
prs_last_df %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable with prs')
# last with neighbor
model_vars
neigh_effect_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable with neighboring syllable with a vowel letter')
neigh_effect_last <- data_wide |>
median_qi(condition_mean = Intercept + b_neigh_vowel_letter1, .width = c(.95, .66))
data_wide
neigh_effect_last <- data_wide |>
median_qi(condition_mean = Intercept + neigh_vowel_letter1, .width = c(.95, .66))
neigh_effect_last %>%
ggplot(aes(y = scr_book, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: book and last syllable with neighboring syllable with a vowel letter')
# First syllable
intercept_first <- data_wide |>
median_qi(condition_mean = Intercept + typefirst, .width = c(.95, .66))
model_vars
data_wide
model_vars
mt_draws_random_scr_book_lex_type <- trace_pent %>%
spread_draws(`r_scr_book:lex_type`[scr_book_lex_type,term])
mt_draws_random_scr_book_lex_type
data_wide_lex_type <- spread(mt_draws_random_scr_book_lex_type, term, `r_scr_book:lex_type`)
data_wide_lex_type
sp_gen_lex_type <- data_wide_lex_type %>% filter(str_detect(scr_book_lex_type , 'SP_Gen'))
colnames(sp_gen_lex_type)
intercept_last_sp_gen <- sp_gen_lex_type |>
median_qi(condition_mean = Intercept, .width = c(.95))
intercept_last_sp_gen
intercept_last_sp_gen <- intercept_last_sp_gen[order(intercept_last_sp_gen$condition_mean),]
lex_type_order <- intercept_last_sp_gen$scr_book_lex_type
intercept_last_sp_gen$scr_book_lex_type <- factor(intercept_last_sp_gen$scr_book_lex_type, levels = lex_type_order)
intercept_last_sp_gen %>%
ggplot(aes(y = scr_book_lex_type, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: Last Syllable in SP_Genesis, lex and type')
sp_gen_lex_type <- data_wide_lex_type %>% filter(str_detect(scr_book_lex_type , 'MT_Gen'))
colnames(sp_gen_lex_type)
intercept_last_sp_gen <- sp_gen_lex_type |>
median_qi(condition_mean = Intercept, .width = c(.95))
intercept_last_sp_gen
intercept_last_sp_gen <- intercept_last_sp_gen[order(intercept_last_sp_gen$condition_mean),]
lex_type_order <- intercept_last_sp_gen$scr_book_lex_type
intercept_last_sp_gen$scr_book_lex_type <- factor(intercept_last_sp_gen$scr_book_lex_type, levels = lex_type_order)
intercept_last_sp_gen %>%
ggplot(aes(y = scr_book_lex_type, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: Last Syllable in SP_Genesis, lex and type')
sp_gen_lex_type <- data_wide_lex_type %>% filter(str_detect(scr_book_lex_type , 'MT_Lev'))
colnames(sp_gen_lex_type)
intercept_last_sp_gen <- sp_gen_lex_type |>
median_qi(condition_mean = Intercept, .width = c(.95))
intercept_last_sp_gen
intercept_last_sp_gen <- intercept_last_sp_gen[order(intercept_last_sp_gen$condition_mean),]
lex_type_order <- intercept_last_sp_gen$scr_book_lex_type
intercept_last_sp_gen$scr_book_lex_type <- factor(intercept_last_sp_gen$scr_book_lex_type, levels = lex_type_order)
intercept_last_sp_gen %>%
ggplot(aes(y = scr_book_lex_type, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: intercept in SP_Genesis, lex and type')
sp_gen_lex_type <- data_wide_lex_type %>% filter(str_detect(scr_book_lex_type , 'SP_Lev'))
colnames(sp_gen_lex_type)
intercept_last_sp_gen <- sp_gen_lex_type |>
median_qi(condition_mean = Intercept, .width = c(.95))
intercept_last_sp_gen
intercept_last_sp_gen <- intercept_last_sp_gen[order(intercept_last_sp_gen$condition_mean),]
lex_type_order <- intercept_last_sp_gen$scr_book_lex_type
intercept_last_sp_gen$scr_book_lex_type <- factor(intercept_last_sp_gen$scr_book_lex_type, levels = lex_type_order)
intercept_last_sp_gen %>%
ggplot(aes(y = scr_book_lex_type, x = condition_mean, xmin = .lower, xmax = .upper)) +
geom_pointinterval() +
ggtitle('Random effect: intercept in SP_Genesis, lex and type')
table(dat_pent_selected$sp, dat_pent_selected$has_prs)
table(dat_pent_selected$sp, dat_pent_selected$has_nme)
head(dat_pent_selected)
dim(dat_pent_selected)
mt <- dat_pent_selected |> filter(scroll == 'MT')
dim(mt)
table(mt$has_vowel_letter, mt$neigh_vowel_letter)
table(mt$neigh_vowel_letter, mt$has_vowel_letter)
mt |> filter(has_vowel_letter == 1 & neigh_vowel_letter == 1)
one_one <- mt |> filter(has_vowel_letter == 1 & neigh_vowel_letter == 1)
head(one_one, 50)
one_one[20:40,]
mt |> filter(has_vowel_letter == 0 & neigh_vowel_letter == 1)
sp <- dat_pent_selected |> filter(scroll == 'SP')
table(sp$neigh_vowel_letter, sp$has_vowel_letter)
sp |> filter(has_vowel_letter == 1 & neigh_vowel_letter == 1)
sp |> filter(has_vowel_letter == 0 & neigh_vowel_letter == 1)
read.csv(file, sep='\t')
file = 'plural_nouns.csv'
read.csv(file, sep='\t')
listdir()
list.files()
file = 'plural_verbs.csv'
read.csv(file, sep='\t')
getwd()
file = 'plural_verbs.csv'
file = '../notebooks/plural_verbs.csv'
read.csv(file, sep='\t')
dat = read.csv(file, sep='\t')
table(dat$has_suffix, dat$verb_ends_on_w)
mosaic(table(dat$has_suffix, dat$verb_ends_on_w))
mosaicplot(table(dat$has_suffix, dat$verb_ends_on_w))
mosaicplot(table(dat$has_suffix, dat$w_in_suffix))
table(dat$has_suffix, dat$verb_ends_on_w)
table(dat$w_in_suffix, dat$verb_ends_on_w)
mosaicplot(table(dat$w_in_suffix, dat$verb_ends_on_w))
table(dat$has_suffix, dat$verb_ends_on_w)
mosaicplot(table(dat$has_suffix, dat$verb_ends_on_w))
mosaicplot(table(dat$has_suffix, dat$verb_ends_on_w))
library(tidyverse)
library(lme4)
library(brms)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'1Qisaa', '4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/nouns_adjectives.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
sum(is.na(dat$pattern))
sum(table(dat$pattern))
dat$has_suffix <- dat$has_prs | dat$has_nme
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prsx <- as.factor(dat$has_prs)
dat$has_suffix <- as.factor(dat$has_suffix)
dat$has_nme <- as.factor(dat$has_nme)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$neigh_vowel_letter <- as.factor(dat$neigh_vowel_letter)
dat$type <- as.factor(dat$type)
dat$lex_type <- paste(dat$lex, dat$type, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$book2 <- dat$book %>% str_replace('1_', '') %>% str_replace('2_', '')
table(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp <- ifelse(dat$scroll %in% QSP_SCROLLS, 1, 0)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
mt <- dat %>% filter(scroll == 'MT')
variation_lex_type_list <- list()
for (lex_t in unique(mt$lex_type)) {
lex_type_df <- mt %>% filter(lex_type == lex_t)
lt_vowels <- unique(lex_type_df$has_vowel_letter)
if (length(lt_vowels) > 1) {
variation_lex_type_list[[lex_t]] <- lex_type_df
}
}
mt_var <- do.call('rbind', variation_lex_type_list)
head(mt_var)
levels(mt_var$type)
dim(mt_var)
