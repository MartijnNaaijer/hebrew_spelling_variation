'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/hiphil_triliteral_with_hireq.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
dat |> filter(tf_id == 172967)
sum(dat$pattern == '')
dat <- dat |> filter(!(pattern == '' & scroll == 'MT'))
sum(is.na(dat$pattern))
sum(table(dat$pattern))
# SELECT CASES WITH HIREQ
dat <- dat |> filter(has_hireq == 1)
dim(dat)
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'SP', 'SP', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
levels(dat$law_phase2)
dat[is.na(dat$law_phase2),]
dim(dat)
head(dat)
str(dat)
table(dat$vt)
dat$vt <- as.factor(dat$vt)
levels(dat$vt)
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('Pent', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=groups)
hpd_fullness
ggplot(data = hpd_fullness, aes(x = law_phase2, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
# DATA EXPLORATION
#install.packages('binom')
library(binom)
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('Pent', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=groups)
hpd_fullness
ggplot(data = hpd_fullness, aes(x = law_phase2, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
# VERBAL TENSES
fullness_df <- dat |> group_by(vt) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$vt <- fullness_df$vt
hpd_fullness
ggplot(data = hpd_fullness, aes(x = vt, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=vt, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
# VERBAL TENSE PER GROUP
head(dat)
table(dat$qsp_sp)
dat$category <- ifelse(dat$scroll == 'MT', 'MT',
ifelse(dat$qsp_sp == 'QSP', 'DSS_QSP',
'DSS_non_QSP'))
table(dat$category)
dat$category <- factor(dat$category, levels=c('MT', 'DSS_non_QSP', 'DSS_QSP'))
fullness_df <- dat |> group_by(category, vt) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$vt <- fullness_df$vt
hpd_fullness$category <- fullness_df$category
hpd_fullness
ggplot(data = hpd_fullness, aes(x = vt, y = mean, fill = category)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=vt, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
scale_fill_grey() +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
table(dat$has_suffix, dat$has_vowel_letter, dat$category)
hiph_mt <- dat |> filter(scroll == 'MT')
table(hiph_mt$has_suffix, hiph_mt$has_vowel_letter, hiph_mt$vt)
mt_df <- dat |> group_by(category, vt, has_suffix) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
mt_df
hpd_mt <- binom.bayes(
x = mt_df$full_count, n = mt_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_mt$vt <- mt_df$vt
hpd_mt$has_suffix <- mt_df$has_suffix
hpd_mt$category <- mt_df$category
ggplot(data = hpd_mt, aes(x = vt, y = mean, fill = as.factor(has_suffix))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "Spelling") +
geom_errorbar( aes(x=vt, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
facet_wrap(~category) +
scale_fill_grey() +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
table(dat$has_prefix, dat$has_vowel_letter, dat$category)
hiph_mt <- dat |> filter(scroll == 'MT')
table(hiph_mt$has_prefix, hiph_mt$has_vowel_letter, hiph_mt$vt)
mt_df <- dat |> group_by(category, vt, has_prefix) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
mt_df
hpd_mt <- binom.bayes(
x = mt_df$full_count, n = mt_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_mt$vt <- mt_df$vt
hpd_mt$has_prefix <- mt_df$has_prefix
hpd_mt$category <- mt_df$category
hpd_mt
ggplot(data = hpd_mt, aes(x = vt, y = mean, fill = as.factor(has_prefix))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "Spelling") +
geom_errorbar( aes(x=vt, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
facet_wrap(~category) +
scale_fill_grey() +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ipf <- dat |> filter(vt == 'impf')
table(ipf$prefix, ipf$has_vowel_letter)
table(ipf$prefix, ipf$has_vowel_letter, ipf$law_phase2)
ipf |> filter(prefix == 'W')
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept") +
set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
seed = 123)
return(trace)
}
head(dat)
str(dat)
table(dat$law_phase2)
table(dat$vt, dat$has_vowel_letter)
formula_mt_dss<- has_vowel_letter ~
has_suffix*law_phase2*vt +
has_prefix*law_phase2*vt +
(has_suffix + has_prefix | scr_book2) +
(has_suffix + has_prefix | lex_type)
bayes_model_mt_dss <- fit_brm_model(dat,
formula_mt_dss,
2000, 4000, 0.95)
summary(bayes_model_mt_dss)
ranef(bayes_model_mt_dss)
bayes_R2(bayes_model_mt_dss)
file_path_mt_dss <- file.path(MODEL_FOLDER, 'bayes_model_mt_dss_affix_effect_hiph_trilit_hireq.rds')
saveRDS(bayes_model_mt_dss, file = file_path_mt_dss)
trace_mt <- readRDS(file_path_mt_dss)
model_vars <- get_variables(trace_mt)
model_vars
fixed_draws <- trace_mt %>%
spread_draws(
b_Intercept,  b_has_suffix1,
b_law_phase2FP, b_law_phase2LBH,
b_law_phase2Other,  b_law_phase2Pent_non_QSP,
b_law_phase2FP_non_QSP, b_law_phase2LBH_non_QSP,
b_law_phase2Other_non_QSP, b_law_phase2Pent_QSP,
b_law_phase2FP_QSP,  b_law_phase2Other_QSP,
b_vtimpv,  b_vtinfc,
b_vtperf,  b_vtptca,
`b_has_prefix1`, `b_has_suffix1:law_phase2FP`,
`b_has_suffix1:law_phase2LBH`, `b_has_suffix1:law_phase2Other`,
`b_has_suffix1:law_phase2Pent_non_QSP`,  `b_has_suffix1:law_phase2FP_non_QSP`,
`b_has_suffix1:law_phase2LBH_non_QSP`, `b_has_suffix1:law_phase2Other_non_QSP`,
`b_has_suffix1:law_phase2Pent_QSP`,  `b_has_suffix1:law_phase2FP_QSP`,
`b_has_suffix1:law_phase2Other_QSP`, `b_has_suffix1:vtimpv`,
`b_has_suffix1:vtinfc`,  `b_has_suffix1:vtperf`,
`b_has_suffix1:vtptca`,  `b_law_phase2FP:vtimpv`,
`b_law_phase2LBH:vtimpv`,  `b_law_phase2Other:vtimpv`,
`b_law_phase2Pent_non_QSP:vtimpv`, `b_law_phase2FP_non_QSP:vtimpv`,
`b_law_phase2LBH_non_QSP:vtimpv`,  `b_law_phase2Other_non_QSP:vtimpv`,
`b_law_phase2Pent_QSP:vtimpv`,`b_law_phase2FP_QSP:vtimpv`,
`b_law_phase2Other_QSP:vtimpv`,  `b_law_phase2FP:vtinfc`,
`b_law_phase2LBH:vtinfc`,  `b_law_phase2Other:vtinfc`,
`b_law_phase2Pent_non_QSP:vtinfc`,`b_law_phase2FP_non_QSP:vtinfc`,
`b_law_phase2LBH_non_QSP:vtinfc`,  `b_law_phase2Other_non_QSP:vtinfc`,
`b_law_phase2Pent_QSP:vtinfc`, `b_law_phase2FP_QSP:vtinfc`,
`b_law_phase2Other_QSP:vtinfc`,  `b_law_phase2FP:vtperf`,
`b_law_phase2LBH:vtperf`,  `b_law_phase2Other:vtperf`,
`b_law_phase2Pent_non_QSP:vtperf`, `b_law_phase2FP_non_QSP:vtperf`,
`b_law_phase2LBH_non_QSP:vtperf`,  `b_law_phase2Other_non_QSP:vtperf`,
`b_law_phase2Pent_QSP:vtperf`, `b_law_phase2FP_QSP:vtperf`,
`b_law_phase2Other_QSP:vtperf`,  `b_law_phase2FP:vtptca`,
`b_law_phase2LBH:vtptca`,  `b_law_phase2Other:vtptca`,
`b_law_phase2Pent_non_QSP:vtptca`, `b_law_phase2FP_non_QSP:vtptca`,
`b_law_phase2LBH_non_QSP:vtptca`,  `b_law_phase2Other_non_QSP:vtptca`,
`b_law_phase2Pent_QSP:vtptca`, `b_law_phase2FP_QSP:vtptca`,
`b_law_phase2Other_QSP:vtptca`,  `b_law_phase2FP:has_prefix1`,
`b_law_phase2LBH:has_prefix1`, `b_law_phase2Other:has_prefix1`,
`b_law_phase2Pent_non_QSP:has_prefix1`,  `b_law_phase2FP_non_QSP:has_prefix1`,
`b_law_phase2LBH_non_QSP:has_prefix1`, `b_law_phase2Other_non_QSP:has_prefix1`,
`b_law_phase2Pent_QSP:has_prefix1`,  `b_law_phase2FP_QSP:has_prefix1`,
`b_law_phase2Other_QSP:has_prefix1`, `b_vtimpv:has_prefix1`,
`b_vtinfc:has_prefix1`,  `b_vtperf:has_prefix1`,
`b_vtptca:has_prefix1`,  `b_has_suffix1:law_phase2FP:vtimpv`,
`b_has_suffix1:law_phase2LBH:vtimpv`,  `b_has_suffix1:law_phase2Other:vtimpv`,
`b_has_suffix1:law_phase2Pent_non_QSP:vtimpv`, `b_has_suffix1:law_phase2FP_non_QSP:vtimpv`,
`b_has_suffix1:law_phase2LBH_non_QSP:vtimpv`, `b_has_suffix1:law_phase2Other_non_QSP:vtimpv`,
`b_has_suffix1:law_phase2Pent_QSP:vtimpv`, `b_has_suffix1:law_phase2FP_QSP:vtimpv`,
`b_has_suffix1:law_phase2Other_QSP:vtimpv`,  `b_has_suffix1:law_phase2FP:vtinfc`,
`b_has_suffix1:law_phase2LBH:vtinfc`,  `b_has_suffix1:law_phase2Other:vtinfc`,
`b_has_suffix1:law_phase2Pent_non_QSP:vtinfc`, `b_has_suffix1:law_phase2FP_non_QSP:vtinfc`,
`b_has_suffix1:law_phase2LBH_non_QSP:vtinfc`, `b_has_suffix1:law_phase2Other_non_QSP:vtinfc`,
`b_has_suffix1:law_phase2Pent_QSP:vtinfc`,  `b_has_suffix1:law_phase2FP_QSP:vtinfc`,
`b_has_suffix1:law_phase2Other_QSP:vtinfc`, `b_has_suffix1:law_phase2FP:vtperf`,
`b_has_suffix1:law_phase2LBH:vtperf`, `b_has_suffix1:law_phase2Other:vtperf`,
`b_has_suffix1:law_phase2Pent_non_QSP:vtperf`,  `b_has_suffix1:law_phase2FP_non_QSP:vtperf`,
`b_has_suffix1:law_phase2LBH_non_QSP:vtperf`, `b_has_suffix1:law_phase2Other_non_QSP:vtperf`,
`b_has_suffix1:law_phase2Pent_QSP:vtperf`,  `b_has_suffix1:law_phase2FP_QSP:vtperf`,
`b_has_suffix1:law_phase2Other_QSP:vtperf`, `b_has_suffix1:law_phase2FP:vtptca`,
`b_has_suffix1:law_phase2LBH:vtptca`, `b_has_suffix1:law_phase2Other:vtptca`,
`b_has_suffix1:law_phase2Pent_non_QSP:vtptca`,  `b_has_suffix1:law_phase2FP_non_QSP:vtptca`,
`b_has_suffix1:law_phase2LBH_non_QSP:vtptca`, `b_has_suffix1:law_phase2Other_non_QSP:vtptca`,
`b_has_suffix1:law_phase2Pent_QSP:vtptca`,  `b_has_suffix1:law_phase2FP_QSP:vtptca`,
`b_has_suffix1:law_phase2Other_QSP:vtptca`, `b_law_phase2FP:vtimpv:has_prefix1`,
`b_law_phase2LBH:vtimpv:has_prefix1`, `b_law_phase2Other:vtimpv:has_prefix1`,
`b_law_phase2Pent_non_QSP:vtimpv:has_prefix1`,  `b_law_phase2FP_non_QSP:vtimpv:has_prefix1`,
`b_law_phase2LBH_non_QSP:vtimpv:has_prefix1`,`b_law_phase2Other_non_QSP:vtimpv:has_prefix1`,
`b_law_phase2Pent_QSP:vtimpv:has_prefix1`,  `b_law_phase2FP_QSP:vtimpv:has_prefix1`,
`b_law_phase2Other_QSP:vtimpv:has_prefix1`, `b_law_phase2FP:vtinfc:has_prefix1`,
`b_law_phase2LBH:vtinfc:has_prefix1`, `b_law_phase2Other:vtinfc:has_prefix1`,
`b_law_phase2Pent_non_QSP:vtinfc:has_prefix1`,  `b_law_phase2FP_non_QSP:vtinfc:has_prefix1`,
`b_law_phase2LBH_non_QSP:vtinfc:has_prefix1`, `b_law_phase2Other_non_QSP:vtinfc:has_prefix1`,
`b_law_phase2Pent_QSP:vtinfc:has_prefix1`,  `b_law_phase2FP_QSP:vtinfc:has_prefix1`,
`b_law_phase2Other_QSP:vtinfc:has_prefix1`, `b_law_phase2FP:vtperf:has_prefix1`,
`b_law_phase2LBH:vtperf:has_prefix1`, `b_law_phase2Other:vtperf:has_prefix1`,
`b_law_phase2Pent_non_QSP:vtperf:has_prefix1`,  `b_law_phase2FP_non_QSP:vtperf:has_prefix1`,
`b_law_phase2LBH_non_QSP:vtperf:has_prefix1`, `b_law_phase2Other_non_QSP:vtperf:has_prefix1`,
`b_law_phase2Pent_QSP:vtperf:has_prefix1`,  `b_law_phase2FP_QSP:vtperf:has_prefix1`,
`b_law_phase2Other_QSP:vtperf:has_prefix1`, `b_law_phase2FP:vtptca:has_prefix1`,
`b_law_phase2LBH:vtptca:has_prefix1`, `b_law_phase2Other:vtptca:has_prefix1`,
`b_law_phase2Pent_non_QSP:vtptca:has_prefix1`,  `b_law_phase2FP_non_QSP:vtptca:has_prefix1`,
`b_law_phase2LBH_non_QSP:vtptca:has_prefix1`, `b_law_phase2Other_non_QSP:vtptca:has_prefix1`,
`b_law_phase2Pent_QSP:vtptca:has_prefix1`,  `b_law_phase2FP_QSP:vtptca:has_prefix1`,
`b_law_phase2Other_QSP:vtptca:has_prefix1`
)
head(dat)
table(dat$category)
formula_mt_dss<- has_vowel_letter ~
has_suffix*category*vt +
has_prefix*category*vt +
(has_suffix + has_prefix | scr_book2) +
(has_suffix + has_prefix | lex_type)
bayes_model_mt_dss <- fit_brm_model(dat,
formula_mt_dss,
2000, 4000, 0.95)
summary(bayes_model_mt_dss)
ranef(bayes_model_mt_dss)
summary(bayes_model_mt_dss)
ranef(bayes_model_mt_dss)
bayes_R2(bayes_model_mt_dss)
file_path_mt_dss <- file.path(MODEL_FOLDER, 'bayes_model_mt_dss_affix_effect_hiph_trilit_hireq.rds')
saveRDS(bayes_model_mt_dss, file = file_path_mt_dss)
trace_mt <- readRDS(file_path_mt_dss)
model_vars <- get_variables(trace_mt)
model_vars
fixed_draws <- trace_mt %>%
spread_draws(b_Intercept,  b_has_suffix1,
b_categoryDSS_non_QSP,  b_categoryDSS_QSP,
b_vtimpv, b_vtinfc,
b_vtperf, b_vtptca,
b_has_prefix1, `b_has_suffix1:categoryDSS_non_QSP`,
`b_has_suffix1:categoryDSS_QSP`, `b_has_suffix1:vtimpv`,
`b_has_suffix1:vtinfc`,  `b_has_suffix1:vtperf`,
`b_has_suffix1:vtptca`,  `b_categoryDSS_non_QSP:vtimpv`,
`b_categoryDSS_QSP:vtimpv`,  `b_categoryDSS_non_QSP:vtinfc`,
`b_categoryDSS_QSP:vtinfc`,  `b_categoryDSS_non_QSP:vtperf`,
`b_categoryDSS_QSP:vtperf`,  `b_categoryDSS_non_QSP:vtptca`,
`b_categoryDSS_QSP:vtptca`,  `b_categoryDSS_non_QSP:has_prefix1`,
`b_categoryDSS_QSP:has_prefix1`, `b_vtimpv:has_prefix1`,
`b_vtinfc:has_prefix1`,  `b_vtperf:has_prefix1`,
`b_vtptca:has_prefix1`,  `b_has_suffix1:categoryDSS_non_QSP:vtimpv`,
`b_has_suffix1:categoryDSS_QSP:vtimpv`, `b_has_suffix1:categoryDSS_non_QSP:vtinfc`,
`b_has_suffix1:categoryDSS_QSP:vtinfc`, `b_has_suffix1:categoryDSS_non_QSP:vtperf`,
`b_has_suffix1:categoryDSS_QSP:vtperf`, `b_has_suffix1:categoryDSS_non_QSP:vtptca`,
`b_has_suffix1:categoryDSS_QSP:vtptca`, `b_categoryDSS_non_QSP:vtimpv:has_prefix1`,
`b_categoryDSS_QSP:vtimpv:has_prefix1`, `b_categoryDSS_non_QSP:vtinfc:has_prefix1`,
`b_categoryDSS_QSP:vtinfc:has_prefix1`, `b_categoryDSS_non_QSP:vtperf:has_prefix1`,
`b_categoryDSS_QSP:vtperf:has_prefix1`, `b_categoryDSS_non_QSP:vtptca:has_prefix1`,
`b_categoryDSS_QSP:vtptca:has_prefix1`
)
summary_mt <- fixed_draws %>%
transmute('MT Imperfect Intercept' = b_Intercept,
'MT Imperfect With Suffix' = b_Intercept + b_has_suffix1,
'MT Imperfect With Prefix' = b_Intercept + b_has_prefix1,
'MT Imperative Intercept' = b_Intercept + b_vtimpv,
'MT Imperative With Suffix' = b_Intercept + b_vtimpv + b_has_suffix1 + `b_has_suffix1:vtimpv`,
'MT Imperative With Prefix' = b_Intercept + b_vtimpv + b_has_prefix1 + `b_vtimpv:has_prefix1`,
'MT Infinitive Intercept' = b_Intercept + b_vtinfc,
'MT Infinitive With Suffix' = b_Intercept + b_vtinfc + b_has_suffix1 + `b_has_suffix1:vtinfc`,
'MT Infinitive With Prefix' = b_Intercept + b_vtinfc + b_has_prefix1 + `b_vtinfc:has_prefix1`,
'MT Perfect Intercept' = b_Intercept + b_vtperf,
'MT Perfect With Suffix' = b_Intercept + b_vtperf + b_has_suffix1 + `b_has_suffix1:vtperf`,
'MT Perfect With Prefix' = b_Intercept + b_vtperf + b_has_prefix1 + `b_vtperf:has_prefix1`,
'MT Participle Intercept' = b_Intercept + b_vtptca,
'MT Participle With Suffix' = b_Intercept + b_vtptca + b_has_suffix1 + `b_has_suffix1:vtptca`,
'MT Participle With Prefix' = b_Intercept + b_vtptca + b_has_prefix1 + `b_vtptca:has_prefix1`,
) %>%
gather() %>%
group_by(key) %>%
mean_hdi(.width = c(.95, .66))
labels_mt <- c(
'MT Participle With Prefix',
'MT Participle With Suffix',
'MT Participle Intercept',
'MT Perfect With Prefix',
'MT Perfect With Suffix',
'MT Perfect Intercept',
'MT Infinitive With Prefix',
'MT Infinitive With Suffix',
'MT Infinitive Intercept',
'MT Imperative With Prefix',
'MT Imperative With Suffix',
'MT Imperative Intercept',
'MT Imperfect With Prefix',
'MT Imperfect With Suffix',
'MT Imperfect Intercept'
)
summary_mt$key <- factor(summary_mt$key, levels = labels_mt)
summary_mt$key <- factor(summary_mt$key, levels = labels_mt)
summary_mt$prob_value <- logit2prob(summary_mt$value)
summary_mt$prob_lower <- logit2prob(summary_mt$.lower)
summary_mt$prob_upper <- logit2prob(summary_mt$.upper)
summary_mt[0:20,]
summary_suffix_mt %>%
ggplot(aes(y = key, x = prob_value, xmin = prob_lower, xmax = prob_upper)) +
geom_pointinterval() +
xlab('Probability') +
ylab('') +
ggtitle('')
summary_mt %>%
ggplot(aes(y = key, x = prob_value, xmin = prob_lower, xmax = prob_upper)) +
geom_pointinterval() +
xlab('Probability') +
ylab('') +
ggtitle('')
summary_non_qsp <- fixed_draws %>%
transmute('Non-QSP Imperfect Intercept' = b_Intercept + b_categoryDSS_non_QSP,
'Non-QSP Imperfect With Suffix' = b_Intercept + b_has_suffix1 + b_categoryDSS_non_QSP + `b_has_suffix1:categoryDSS_non_QSP`,
'Non-QSP Imperfect With Prefix' = b_Intercept + b_has_prefix1 + b_categoryDSS_non_QSP + `b_categoryDSS_non_QSP:has_prefix1`,
'Non-QSP Imperative Intercept' = b_Intercept + b_vtimpv + b_categoryDSS_non_QSP + `b_categoryDSS_non_QSP:vtimpv`,
'Non-QSP Imperative With Suffix' = b_Intercept + b_vtimpv + b_has_suffix1 + `b_has_suffix1:vtimpv` + b_categoryDSS_non_QSP + `b_has_suffix1:categoryDSS_non_QSP` + `b_categoryDSS_non_QSP:vtimpv` + `b_has_suffix1:categoryDSS_non_QSP:vtimpv`,
'Non-QSP Imperative With Prefix' = b_Intercept + b_vtimpv + b_has_prefix1 + `b_vtimpv:has_prefix1` + b_categoryDSS_non_QSP + `b_categoryDSS_non_QSP:has_prefix1` + `b_categoryDSS_non_QSP:vtimpv` + `b_categoryDSS_non_QSP:vtimpv:has_prefix1`,
'Non-QSP Infinitive Intercept' = b_Intercept + b_vtinfc + b_categoryDSS_non_QSP + `b_has_suffix1:vtinfc` + `b_categoryDSS_non_QSP:vtinfc`,
'Non-QSP Infinitive With Suffix' = b_Intercept + b_vtinfc + b_has_suffix1 + `b_has_suffix1:vtinfc` + b_categoryDSS_non_QSP + `b_has_suffix1:categoryDSS_non_QSP` + `b_has_suffix1:vtinfc` + `b_categoryDSS_non_QSP:vtinfc` + `b_has_suffix1:categoryDSS_non_QSP:vtinfc`,
'Non-QSP Infinitive With Prefix' = b_Intercept + b_vtinfc + b_has_prefix1 + `b_vtinfc:has_prefix1` + b_categoryDSS_non_QSP + `b_categoryDSS_non_QSP:has_prefix1` + `b_has_suffix1:vtinfc` + `b_categoryDSS_non_QSP:vtinfc` + `b_categoryDSS_non_QSP:vtinfc:has_prefix1`,
'Non-QSP Perfect Intercept' = b_Intercept + b_vtperf + b_categoryDSS_non_QSP + `b_has_suffix1:vtperf` + `b_categoryDSS_non_QSP:vtperf`,
'Non-QSP Perfect With Suffix' = b_Intercept + b_vtperf + b_has_suffix1 + `b_has_suffix1:vtperf` + b_categoryDSS_non_QSP + `b_has_suffix1:categoryDSS_non_QSP` + `b_has_suffix1:vtperf` + `b_categoryDSS_non_QSP:vtperf` + `b_has_suffix1:categoryDSS_non_QSP:vtperf`,
'Non-QSP Perfect With Prefix' = b_Intercept + b_vtperf + b_has_prefix1 + `b_vtperf:has_prefix1` + b_categoryDSS_non_QSP + `b_categoryDSS_non_QSP:has_prefix1` + `b_has_suffix1:vtperf` + `b_categoryDSS_non_QSP:vtperf` + `b_categoryDSS_non_QSP:vtperf:has_prefix1`,
'Non-QSP Participle Intercept' = b_Intercept + b_vtptca + b_categoryDSS_non_QSP + `b_has_suffix1:vtptca` + `b_categoryDSS_non_QSP:vtptca`,
'Non-QSP Participle With Suffix' = b_Intercept + b_vtptca + b_has_suffix1 + `b_has_suffix1:vtptca` + b_categoryDSS_non_QSP + `b_has_suffix1:categoryDSS_non_QSP` + `b_has_suffix1:vtptca` + `b_categoryDSS_non_QSP:vtptca` + `b_has_suffix1:categoryDSS_non_QSP:vtptca`,
'Non-QSP Participle With Prefix' = b_Intercept + b_vtptca + b_has_prefix1 + `b_vtptca:has_prefix1` + b_categoryDSS_non_QSP + `b_categoryDSS_non_QSP:has_prefix1` + `b_has_suffix1:vtptca` + `b_categoryDSS_non_QSP:vtptca` + `b_categoryDSS_non_QSP:vtptca:has_prefix1`,
) %>%
gather() %>%
group_by(key) %>%
mean_hdi(.width = c(.95, .66))
labels_non_QSP <- c(
'Non-QSP Participle With Prefix',
'Non-QSP Participle With Suffix',
'Non-QSP Participle Intercept',
'Non-QSP Perfect With Prefix',
'Non-QSP Perfect With Suffix',
'Non-QSP Perfect Intercept',
'Non-QSP Infinitive With Prefix',
'Non-QSP Infinitive With Suffix',
'Non-QSP Infinitive Intercept',
'Non-QSP Imperative With Prefix',
'Non-QSP Imperative With Suffix',
'Non-QSP Imperative Intercept',
'Non-QSP Imperfect With Prefix',
'Non-QSP Imperfect With Suffix',
'Non-QSP Imperfect Intercept'
)
labels_QSP <- c(
'QSP Participle With Prefix',
'QSP Participle With Suffix',
'QSP Participle Intercept',
'QSP Perfect With Prefix',
'QSP Perfect With Suffix',
'QSP Perfect Intercept',
'QSP Infinitive With Prefix',
'QSP Infinitive With Suffix',
'QSP Infinitive Intercept',
'QSP Imperative With Prefix',
'QSP Imperative With Suffix',
'QSP Imperative Intercept',
'QSP Imperfect With Prefix',
'QSP Imperfect With Suffix',
'QSP Imperfect Intercept'
)
summary_non_qsp$key <- factor(summary_non_qsp$key, levels = labels_non_QSP)
summary_non_qsp$prob_value <- logit2prob(summary_non_qsp$value)
summary_non_qsp$prob_lower <- logit2prob(summary_non_qsp$.lower)
summary_non_qsp$prob_upper <- logit2prob(summary_non_qsp$.upper)
summary_non_qsp[0:20,]
summary_non_qsp %>%
ggplot(aes(y = key, x = prob_value, xmin = prob_lower, xmax = prob_upper)) +
geom_pointinterval() +
xlab('Probability') +
ylab('') +
ggtitle('')
curve(dnorm(x, 0, 1), from=-4, to=4)
curve(dnorm(x, 0, 1), from=-4, to=4, xlab='effect')
curve(dnorm(x, 0, 1), from=-4, to=4, xlab='effect', ylab='')
abline(v=2.2, col="blue")
curve(dnorm(x, 0, 1), from=-4, to=4, xlab='effect', ylab='')
abline(v=2, col="red")
abline(h=0, col="black")
curve(dnorm(x, 0, 1), from=-4, to=4, xlab='effect', ylab='')
> abline(v=2, col="red")
abline(v=2, col="red")
abline(h=0, col="black")
