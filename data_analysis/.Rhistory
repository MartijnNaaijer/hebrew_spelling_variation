1 +
(has_suffix | scr_book2) +
(has_suffix | lex_type)
formula_ptca_5 <- has_vowel_letter ~
1 +
(1 | scr_book2) +
(1 | lex_type)
bayes_model_mt_sp_dss_ptca_4 <- fit_brm_model(dat,
formula_ptca_4,
3000, 6000, 0.99)
bayes_model_mt_sp_dss_ptca_5 <- fit_brm_model(dat,
formula_ptca_5,
3000, 6000, 0.99)
bayes_factor(bayes_model_mt_sp_dss_ptca_5, bayes_model_mt_sp_dss_ptca_4)
bayes_model_mt_sp_dss_ptca_4 <- fit_brm_model(dat,
formula_ptca_4,
3000, 12000, 0.99)
bayes_model_mt_sp_dss_ptca_5 <- fit_brm_model(dat,
formula_ptca_5,
3000, 12000, 0.99)
bayes_factor(bayes_model_mt_sp_dss_ptca_5, bayes_model_mt_sp_dss_ptca_4)
bayes_model_mt_sp_dss_ptca_4 <- fit_brm_model(dat,
formula_ptca_4,
3000, 20000, 0.99)
bayes_model_mt_sp_dss_ptca_5 <- fit_brm_model(dat,
formula_ptca_5,
3000, 20000, 0.99)
bayes_factor(bayes_model_mt_sp_dss_ptca_5, bayes_model_mt_sp_dss_ptca_4)
formula_ptca_1 <- has_vowel_letter ~
1 +
(has_suffix + has_prefix + ay_ay + i_yod | scr_book2) +
(has_suffix + has_prefix + ay_ay + i_yod  | lex_type)
bayes_model_mt_sp_dss_ptca <- fit_brm_model(dat,
formula_ptca_1,
3000, 20000, 0.95)
bayes_factor(bayes_model_mt_sp_dss_ptca_4, bayes_model_mt_sp_dss_ptca_5)
formula_ptca_1 <- has_vowel_letter ~
1 +
(has_suffix + has_prefix + ay_ay + i_yod | scr_book2) +
(has_suffix + has_prefix + ay_ay + i_yod  | lex_type)
formula_ptca_2 <- has_vowel_letter ~
1 +
(has_suffix + has_prefix + ay_ay | scr_book2) +
(has_suffix + has_prefix + ay_ay  | lex_type)
formula_ptca_3 <- has_vowel_letter ~
1 +
(has_suffix + has_prefix | scr_book2) +
(has_suffix + has_prefix  | lex_type)
bayes_model_mt_sp_dss_ptca_3 <- fit_brm_model(dat,
formula_ptca_3,
3000, 20000, 0.95)
View(bayes_model_mt_sp_dss_ptca_5)
View(bayes_model_mt_sp_dss_ptca_5)
bayes_factor(bayes_model_mt_sp_dss_ptca_3, bayes_model_mt_sp_dss_ptca_4)
rm(bayes_model_mt_sp_dss_ptca_5)
rm(bayes_model_mt_sp_dss_ptca_3)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('1Qisaa', '1QisaaI', '1QisaaII', '2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/ptca_qal.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
dat <- dat[!(dat$pattern == '' & dat$scroll == 'MT'),]
sum(is.na(dat$pattern))
sum(table(dat$pattern))
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'SP', 'SP', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
levels(dat$law_phase2)
dim(dat)
head(dat)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT'))
str(mt_sp)
mt_sp <- droplevels(mt_sp)
table(mt_sp$type2)
table(dat$law_phase2)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
head(dat)
dat$spec_stem <- ifelse(substr(dat$lex, 1, 1) == 'J', 'i_yod',
ifelse(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3), 'ay_ay',
'no_special'))
dat$spec_stem <- factor(dat$spec_stem, levels=c('no_special', 'i_yod', 'ay_ay'))
head(dat)
str(dat)
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept") +
set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
save_pars = save_pars(all = TRUE),
seed = 123)
return(trace)
}
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept"), #+
#  set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
save_pars = save_pars(all = TRUE),
seed = 123)
return(trace)
}
formula_mt_sp_dss_ptca <- has_vowel_letter ~
has_suffix*law_phase2 +
has_prefix*law_phase2 +
ay_ay*law_phase2 +
i_yod*law_phase2 +
(has_suffix | scr_book2) +
(has_suffix | lex_type)
bayes_model_mt_sp_dss_ptca <- fit_brm_model(dat,
formula_mt_sp_dss_ptca,
3000, 20000, 0.99)
summary(bayes_model_mt_sp_dss_ptca)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR) # p_direction
library(binom)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'1Qisaa', '4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/ptcp_qal.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
sum(is.na(dat$pattern))
sum(table(dat$pattern))
sum(dat$pattern == '')
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp <- ifelse(dat$scroll %in% QSP_SCROLLS, 1, 0)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$qsp <- as.factor(dat$qsp)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
head(dat)
levels(dat$law_phase2)
table(dat$scroll)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT')) # |> filter(book %in% LAW_BOOKS)
mt_sp <- droplevels(mt_sp)
str(mt_sp)
table(mt_sp$type2)
table(dat$has_prefix, dat$has_vowel_letter, dat$law_phase2)
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept") +
set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
seed = 123)
return(trace)
}
formula_mt_dss_ptcp <- has_vowel_letter ~
has_suffix*law_phase2 +
has_prefix*law_phase2 +
ay_ay*law_phase2 +
(has_suffix + has_prefix | scr_book2) +
(has_suffix + has_prefix | lex_type)
bayes_model_mt_dss_ptcp <- fit_brm_model(dat,
formula_mt_dss_ptcp,
4000, 8000, 0.99)
summary(bayes_model_mt_dss_ptcp)
mt_pent <- dat |> filter(law_phase2 == 'Pent')
table(mt_pent$has_prefix, mt_pent$has_vowel_letter, mt_pent$lex)
mt_pent <- droplevels(mt_pent)
table(mt_pent$has_prefix, mt_pent$has_vowel_letter, mt_pent$lex)
mt_fp <- dat |> filter(law_phase2 == 'FP')
mt_fp <- droplevels(mt_fp)
table(mt_fp$has_prefix, mt_fp$has_vowel_letter, mt_fp$lex)
mt_fp <- dat |> filter(law_phase2 == 'FP') |> droplevels()
mt_pent <- dat |> filter(law_phase2 == 'Pent') |> droplevels()
table(mt_pent$has_prefix, mt_pent$has_vowel_letter, mt_pent$lex)
mt_fp <- dat |> filter(law_phase2 == 'FP') |> droplevels()
table(mt_fp$has_prefix, mt_fp$has_vowel_letter, mt_fp$lex)
table(mt_pent$has_suffix, mt_pent$has_vowel_letter, mt_pent$lex)
table(mt_pent$has_suffix, mt_pent$has_vowel_letter, mt_pent$lex)
summary(bayes_model_mt_dss_ptcp)
gc()
summary(bayes_model_mt_dss_ptcp)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR) # p_direction
library(binom)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'1Qisaa', '4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/ptcp_qal.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
sum(is.na(dat$pattern))
sum(table(dat$pattern))
sum(dat$pattern == '')
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp <- ifelse(dat$scroll %in% QSP_SCROLLS, 1, 0)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$qsp <- as.factor(dat$qsp)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
head(dat)
fit_brm_model <- function(data, formula, warmup, iter, adapt_delta) {
trace <- brm(formula = formula,
prior = set_prior("normal(0, 5)", class = "Intercept") +
set_prior("normal(0, 5)", class = "b"),
data = data,
family = bernoulli(link = "logit"),
warmup = warmup,
iter = iter,
chains = 4,
cores=4,
control = list(adapt_delta = adapt_delta),
seed = 123)
return(trace)
}
formula_mt_dss_ptcp2 <- has_vowel_letter ~
has_suffix*law_phase2 +
ay_ay*law_phase2 +
#has_prefix*law_phase2 +
(has_suffix | scr_book2) +
(has_suffix | lex_type)
formula_mt_dss_ptcp2 <- has_vowel_letter ~
has_suffix*law_phase2 +
ay_ay*law_phase2 +
#has_prefix*law_phase2 +
(has_suffix | scr_book2) +
(has_suffix | lex_type)
bayes_model_mt_dss_ptcp2 <- fit_brm_model(dat,
formula_mt_dss_ptcp2,
4000, 8000, 0.99)
summary(bayes_model_mt_dss_ptcp2)
dat$iii_h <- as.factor(as.numeric(substr(dat$lex, 3, 3) == 'H'))
# iii-he
table(dat$iii_h, dat$has_vowel_letter)
table(dat$iii_h, dat$has_vowel_letter, dat$law_phase2)
dat |> filter(iii_h == 1)
# iii_he
table(dat$iii_h, dat$has_vowel_letter)
ay_ay_df <- dat |> group_by(law_phase2, iii_he) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
ay_ay_df <- dat |> group_by(law_phase2, iii_h) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.bayes(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_ay_ay$law_phase2 <- ay_ay_df$law_phase2
hpd_ay_ay$ay_ay <- ay_ay_df$iii_h
hpd_ay_ay
groups <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other', 'Pent_non_QSP',
'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP', 'Pent_QSP', 'Other_QSP')
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=groups)
ggplot(data = hpd_ay_ay, aes(x = law_phase2, y = mean, fill = as.factor(ay_ay))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "I-yod") +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggplot(data = hpd_ay_ay, aes(x = law_phase2, y = mean, fill = as.factor(ay_ay))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "III-he") +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
table(dat$iii_h, dat$has_vowel_letter, dat$law_phase2)
groups <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other', 'Pent_non_QSP',
'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP', 'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=groups)
ggplot(data = hpd_ay_ay, aes(x = law_phase2, y = mean, fill = as.factor(ay_ay))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "III-he") +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
# iii_he
table(dat$iii_h, dat$has_vowel_letter)
ay_ay_df <- dat |> group_by(law_phase2, iii_h) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
hpd_ay_ay <- binom.bayes(
x = ay_ay_df$full_count, n = ay_ay_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_ay_ay$law_phase2 <- ay_ay_df$law_phase2
hpd_ay_ay$ay_ay <- ay_ay_df$iii_h
hpd_ay_ay
groups <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other', 'Pent_non_QSP',
'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP', 'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_ay_ay$law_phase2 <- factor(hpd_ay_ay$law_phase2, levels=groups)
ggplot(data = hpd_ay_ay, aes(x = law_phase2, y = mean, fill = as.factor(ay_ay))) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling', fill = "III-he") +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
