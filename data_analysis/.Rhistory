# NEEDED FOR CLUSTERING IN FILE clustering_regression_results.R
phase_book_df <- dat |>  distinct(law_phase2, scr_book2)
write.csv(phase_book_df,
'C:/Users/geitb/Dropbox/monograph_orthography/cluster_analysis/phase_book_ptca.csv',
row.names=FALSE)
# III-he
table(dat$iii_h, dat$has_vowel_letter, dat$law_phase2)
# III->
table(dat$iii_alef, dat$has_vowel_letter, dat$law_phase2)
# I-yod
table(dat$i_yod, dat$has_vowel_letter, dat$law_phase2)
# I-NUN
table(dat$i_nun, dat$has_vowel_letter, dat$law_phase2)
## ALL FIRST LETTERS
dat$first_let <- as.factor(substr(dat$lex, 1, 1))
table(dat$first_let, dat$has_vowel_letter, dat$law_phase2)
let_df <- as.data.frame.matrix(table(dat$first_let, dat$has_vowel_letter))
let_df$char <- rownames(let_df) |> as.factor()
let_df$mean <- let_df$`1` / (let_df$`0` + let_df$`1`)
barplot(let_df$mean, names.arg= let_df$char)
str(let_df)
l <- dat |>  filter(first_let == 'R') |> droplevels() # filter(scroll == 'MT') |>
table(l$lex, l$has_vowel_letter, l$law_phase2)
# explore prefix effect in MT Pentateuch
levels(dat$law_phase2)
mt_pent <- dat |> filter(law_phase2 == 'Pent') |> droplevels()
prior_intercept_prob <- mean(as.numeric(as.character(dat$has_vowel_letter)))
prior_intercept_logit <- prob2logit(prior_intercept_prob)
formula_mt_sp_dss_ptca_n3 <- has_vowel_letter ~
has_suffix*law_phase2 +
has_prefix*law_phase2 +
ay_ay*law_phase2 +
i_yod*law_phase2 +
i_nun*law_phase2 +
(1 | scr_book2/lex)
bayes_model_mt_sp_dss_ptca_n3 <- fit_brm_model(dat,
formula_mt_sp_dss_ptca_n3,
5000, 15000, 0.95, prior_intercept_logit)
# dat
file_path_mt_sp_dss_ptca <- file.path(MODEL_FOLDER, 'bayes_model_mt_sp_dss_affix_effect_ptca_n3.rds')
saveRDS(bayes_model_mt_sp_dss_ptca_n3, file = file_path_mt_sp_dss_ptca)
# R2 = 0.575
summary(bayes_model_mt_sp_dss_ptca_n3)
bayes_R2(bayes_model_mt_sp_dss_ptca_n3)
trace_mt <- readRDS(file_path_mt_sp_dss_ptca)
bayes_R2(trace_mt)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR) # p_direction
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs/images_infa'
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
DATASET <- 'infa_qal.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
# AD HOC REMOVALS
# 1QIsaa 1903077, PRR, g_cons PWR is infc in MT according to BHSA
dat <- dat |> filter(tf_id != 1903077)
dim(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
dat$i_h <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'H'))
dat$iii_h <- as.factor(as.numeric(substr(dat$lex, 3, 3) == 'H'))
dat$iii_alef <- as.factor(as.numeric(substr(dat$lex, 3, 3) == '>'))
dat$i_nun <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'N'))
table(dat$law_phase2)
table(dat$has_suffix)
dat$qsp <- as.factor(ifelse(dat$law_phase2 %in% c('Pent_QSP', 'FP_QSP', 'Other_QSP'), 1, 0))
#############################################
# NEEDED FOR CLUSTERING IN FILE clustering_regression_results.R
phase_book_df <- dat |>  distinct(law_phase2, scr_book2)
write.csv(phase_book_df,
'C:/Users/geitb/Dropbox/monograph_orthography/cluster_analysis/phase_book_infa.csv',
row.names=FALSE)
table(dat$ay_ay, dat$has_vowel_letter)
table(dat$i_yod, dat$has_vowel_letter)
table(dat$iii_h, dat$has_vowel_letter)
table(dat$iii_alef, dat$has_vowel_letter)
table(dat$i_nun, dat$has_vowel_letter)
table(dat$i_h, dat$has_vowel_letter)
dat |> filter(ay_ay == 1)
dat |> filter(iii_h == 1 & has_vowel_letter == 1)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT'))
str(mt_sp)
mt_sp <- droplevels(mt_sp)
table(mt_sp$type2)
mt <- dat |> filter(scroll == 'MT')
str(mt)
mt <- droplevels(mt)
table(mt$book, mt$has_vowel_letter)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR) # p_direction
library(binom)
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs/images_ptcp'
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
DATASET <- 'ptcp_qal.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT')) # |> filter(book %in% LAW_BOOKS)
mt_sp <- droplevels(mt_sp)
str(mt_sp)
table(mt_sp$type2)
dat <- dat |> droplevels()
table(dat$book, dat$has_vowel_letter)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
library(binom)
################################################################################
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
# VERBS WITH ARTICIPLES WITHOUT O SOUND IN MT
NOT_USEFUL_VERBS <- c('ML>[', 'JR>[', '>SP[')
DATASET <- 'ptca_qal.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
dat <- dat |> filter(!lex %in% NOT_USEFUL_VERBS) |> droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
lex_freqs <- as.data.frame(table(dat$lex))
colnames(lex_freqs) <- c('lex', 'freq')
dat <- merge(dat, lex_freqs, by = 'lex', all = TRUE)
dat <- dat[order(dat$tf_id, decreasing = FALSE), ]
head(dat)
dim(dat)
head(dat)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT'))
str(mt_sp)
mt_sp <- droplevels(mt_sp)
table(mt_sp$book, mt_sp$has_vowel_letter)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
DATASET <- 'infc_qal_triliteral.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
#############################################
# NEEDED FOR CLUSTERING IN FILE clustering_regression_results.R
phase_book_df <- dat |>  distinct(law_phase2, scr_book2)
write.csv(phase_book_df,
'C:/Users/geitb/Dropbox/monograph_orthography/cluster_analysis/phase_book_infc_qal_trilit.csv',
row.names=FALSE)
dat$ay_ay <- as.factor(as.numeric(substr(dat$lex, 2, 2) == substr(dat$lex, 3, 3)))
dat$i_yod <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'J'))
dat$iii_h <- as.factor(as.numeric(substr(dat$lex, 3, 3) == 'H'))
dat$iii_alef <- as.factor(as.numeric(substr(dat$lex, 3, 3) == '>'))
dat$i_nun <- as.factor(as.numeric(substr(dat$lex, 1, 1) == 'N'))
sort(table(dat$lex))
head(dat)
unique(dat$lex)
dat |> filter(ay_ay == 1) |> tail(20)
dat |> filter(ay_ay == 1) |> head(20)
table(dat$ay_ay, dat$has_vowel_letter)
table(dat$i_yod, dat$has_vowel_letter)
table(dat$iii_h, dat$has_vowel_letter)
table(dat$iii_alef, dat$has_vowel_letter)
table(dat$i_nun, dat$has_vowel_letter)
head(dat)
# EXPLORE DATA
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT'))
str(mt_sp)
mt_sp <- droplevels(mt_sp)
table(mt_sp$book, mt_sp$has_vowel_letter)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
DATASET <- 'infc_qal_lamed_he.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
lbh <- dat |> filter(law_phase2 == 'LBH') |> droplevels()
table(lbh$book2, lbh$has_vowel_letter)
lbh |> filter(book2 == 'Nehemiah')
lbh |> filter(book2 == 'Daniel')
mt <- dat |> filter(scroll == 'MT') |> droplevels()
table(mt$book2, mt$has_prefix)
#################################################################################
# DATA EXPLORATION
#install.packages('binom')
library(binom)
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('Pent', 'FP', 'LBH', 'Other', 'Pent_non_QSP',
'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP', 'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=groups)
hpd_fullness
ggplot(data = hpd_fullness, aes(x = law_phase2, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
mt <- dat |> filter(scroll == 'MT') |> droplevels()
table(mt$book2, mt$has_prefix)
table(mt$book, mt$has_vowel_letter)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
MODEL_FOLDER <- 'C:/Users/geitb/Kopenhagen/KopenhagenResearch/monograph/chapters/NounsAdjectives/models_rstanarm'
EBH_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua",
"Judges", "1_Samuel", "2_Samuel", "1_Kings", "2_Kings")
LBH_BOOKS <- c("Esther", "Daniel", "Ezra", "Nehemiah", "1_Chronicles", "2_Chronicles")
LAW_BOOKS <- c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy")
QSP_SCROLLS = c('1Qisaa', '1QisaaI', '1QisaaII','2Q3', '4Q13', '4Q20', '2Q7', '4Q27', '1Q4', '2Q12', '4Q37', '4Q38', '4Q38a', '4Q40', '4Q53',
'4Q57', '2Q13', '4Q78', '4Q80', '4Q82', '4Q128', '4Q129', '4Q134', '4Q135', '4Q136',
'4Q137', '4Q138', '4Q139', '4Q140', '4Q141', '4Q142', '4Q143', '4Q144', '4Q158', '4Q364',
'4Q365', '4Q96', '4Q111', '4Q109', '11Q5', '11Q6', '11Q7', '11Q8')
length(QSP_SCROLLS)
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
dat <- read.csv('C:/Users/geitb/Kopenhagen/KopenhagenResearch/scripts_research/hebrew_spelling_variation/data/hiphil_triliteral_with_hireq.csv', sep='\t')
dim(dat)
head(dat)
str(dat)
unique(dat$book)
dat |> filter(tf_id == 172967)
sum(dat$pattern == '')
dat <- dat |> filter(!(pattern == '' & scroll == 'MT'))
sum(is.na(dat$pattern))
sum(table(dat$pattern))
# SELECT CASES WITH HIREQ
dat <- dat |> filter(has_hireq == 1)
dim(dat)
dat$has_suffix <- as.factor(as.numeric(dat$has_prs | dat$has_nme | dat$has_hloc))
# has_prefix, has_prs, has_nme, lex, book, has_vowel_letter
dat$has_prefix <- as.factor(dat$has_prefix)
dat$has_prs <- as.factor(dat$has_prs)
dat$has_nme <- as.factor(dat$has_nme)
dat$has_hloc <- as.factor(dat$has_hloc)
dat$lex <- as.factor(dat$lex)
dat$book <- as.factor(dat$book)
dat$has_vowel_letter <- as.factor(dat$has_vowel_letter)
dat$type <- as.factor(dat$type)
dat$book2 <- dat$book %>% str_replace('1_', '') |> str_replace('2_', '')
table(dat$book2)
# Make 2 scrolls of 1Qisaa
dat$scroll <- ifelse(dat$scroll == '1Qisaa' & dat$chapter < 34, '1QisaaI',
ifelse(dat$scroll == '1Qisaa' & dat$chapter > 33, '1QisaaII',
dat$scroll))
dat$scroll <- as.factor(dat$scroll)
dat$scr_book2 <- paste(dat$scroll, dat$book2, sep='_')
mt_sp_books <- unique(dat$scr_book2)
mt_sp_books
dat$scr_book2 <- factor(dat$scr_book2, levels = mt_sp_books)
unique(dat$scr_book2)
dat$book2 <- as.factor(dat$book2)
dat$phase <- ifelse(dat$book %in% EBH_BOOKS, 'EBH', ifelse(dat$book %in% LBH_BOOKS, 'LBH', 'NO'))
dat$law_phase <- ifelse(dat$book %in% LAW_BOOKS, 0, ifelse(dat$book %in% EBH_BOOKS, 1,
ifelse(dat$book %in% LBH_BOOKS, 2, 3)))
dat$law_phase <- as.factor(dat$law_phase)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'SP', 'SP', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
str(dat)
dat$type
dat$type <- factor(dat$type, levels = c('last', 'first', 'single'))
levels(dat$type)
# Merge single and last syllables in new variable type2
dat$type2 <- ifelse(dat$type %in% c('single', 'last'), 'last', 'first')
dat$type2 <- factor(dat$type2, levels = c('last', 'first'))
dat$lex_type <- paste(dat$lex, dat$type2, sep='_')
dat$lex_type <- as.factor(dat$lex_type)
dat$law_phase2 <- ifelse(dat$book %in% LAW_BOOKS, 'Pent',
ifelse(dat$book %in% EBH_BOOKS, 'FP',
ifelse(dat$book %in% LBH_BOOKS, 'LBH',
'Other')))
dat$law_phase2 <- ifelse(!dat$scroll %in% c(c('MT', 'SP'), QSP_SCROLLS), paste0(dat$law_phase2, '_non_QSP'),
ifelse(dat$scroll %in% QSP_SCROLLS, paste0(dat$law_phase2, '_QSP'),
ifelse(dat$scroll == 'SP', paste0(dat$law_phase2, '_SP'),
dat$law_phase2)))
dat$law_phase2 <- as.factor(dat$law_phase2)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
dat$law_phase2 <- factor(dat$law_phase2, levels=law_phase2_levels)
levels(dat$law_phase2)
dat[is.na(dat$law_phase2),]
dim(dat)
head(dat)
str(dat)
table(dat$vt)
dat$vt <- as.factor(dat$vt)
levels(dat$vt)
mt_sp <- dat |> filter(scroll %in% c('SP', 'MT')) # |> filter(book %in% LAW_BOOKS)
mt_sp <- droplevels(mt_sp)
str(mt_sp)
table(mt_sp$type2)
dat <- dat |> droplevels()
table(dat$book, dat$has_vowel_letter)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
DATASET <- 'niph_hiph_pe_yod.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
dat$second_char <- str_sub(dat$lex, 2, 2)
dat$first_char <- str_sub(dat$g_cons, 1, 1)
dat <- droplevels(dat)
table(dat$second_char)
jya <- dat |> filter(lex == 'JY>[')
dim(jya)
dim(dat)
dat <- dat |> filter(second_char != 'Y')
dim(dat)
#############################################
# NEEDED FOR CLUSTERING IN FILE clustering_regression_results.R
phase_book_df <- dat |>  distinct(law_phase2, scr_book2)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
DATASET <- 'niph_hiph_pe_yod.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
dat$second_char <- str_sub(dat$lex, 2, 2)
dat$first_char <- str_sub(dat$g_cons, 1, 1)
dat <- droplevels(dat)
table(dat$second_char)
jya <- dat |> filter(lex == 'JY>[')
dim(jya)
dim(dat)
dat <- dat |> filter(second_char != 'Y')
dim(dat)
#############################################
# NEEDED FOR CLUSTERING IN FILE clustering_regression_results.R
phase_book_df <- dat |>  distinct(law_phase2, scr_book2)
write.csv(phase_book_df,
'C:/Users/geitb/Dropbox/monograph_orthography/cluster_analysis/phase_book_ni_hi_pe_yod.csv',
row.names=FALSE)
# SUFFIX EFFECT
colnames(dat)
table(jya$vs)
dat <- rbind(dat, jya)
qsp <-  dat |> filter(scroll != 'MT') |> filter(scroll %in% QSP_SCROLLS)
non_qsp <- dat |> filter(scroll != 'MT') |> filter(!scroll %in% QSP_SCROLLS)
mt <- dat |> filter(scroll == 'MT')
table(mt$has_suffix, mt$has_vowel_letter)
table(non_qsp$has_suffix, non_qsp$has_vowel_letter)
table(mt$book, mt$has_vowel_letter)
