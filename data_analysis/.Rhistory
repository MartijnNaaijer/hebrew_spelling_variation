scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
mosaicplot(prs_table)
ggsave(file.path(IMAGE_FOLDER, 'explore_mosaicplot_prs_groups.png'))
mosaicplot(prs_table)
ggsave(file.path(IMAGE_FOLDER, 'explore_mosaicplot_prs_groups.png'))
mosaicplot(prs_table)
ggsave(file.path(IMAGE_FOLDER, 'explore_mosaicplot_prs_groups.png'))
mosaicplot(prs_table)
ggsave(file.path(IMAGE_FOLDER, 'explore_mosaicplot_prs_groups.png'))
dat_mt_impf <- dat |> filter(scroll == 'MT') |> filter(vt == 'impf')
dim(dat_mt_impf)
head(dat)
dat_mt_impf_no_prefix <- dat_mt_impf |> filter(has_prefix == 0)
dat_mt_impf_prefix <- dat_mt_impf |> filter(has_prefix == 1)
dat_mt_imp_no_prefix_and_prefix <-rbind(dat_mt_impf_no_prefix, dat_mt_impf_prefix) |> droplevels()
prefix_table <- table(dat_mt_imp_no_prefix_and_prefix$has_prefix, dat_mt_imp_no_prefix_and_prefix$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix$law_phase2)
prefix_table
dat_mt_imp_no_prefix_and_prefix_pent <- dat_mt_imp_no_prefix_and_prefix |> filter(law_phase2 == 'Pent')
table(dat_mt_imp_no_prefix_and_prefix_pent$has_prefix, dat_mt_imp_no_prefix_and_prefix_pent$has_suffix, dat_mt_imp_no_prefix_and_prefix_pent$has_vowel_letter)
table(dat_mt_imp_no_prefix_and_prefix_pent$has_prefix, dat_mt_imp_no_prefix_and_prefix_pent$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix_pent$has_suffix)
dat_mt_imp_no_prefix_and_prefix_pent <- dat_mt_imp_no_prefix_and_prefix |> filter(law_phase2 == 'FP')
table(dat_mt_imp_no_prefix_and_prefix_pent$has_prefix, dat_mt_imp_no_prefix_and_prefix_pent$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix_pent$has_suffix)
phase <- 'Pent'
dat_mt_imp_no_prefix_and_prefix_pent <- dat_mt_imp_no_prefix_and_prefix |> filter(law_phase2 == phase)
table(dat_mt_imp_no_prefix_and_prefix_pent$has_prefix, dat_mt_imp_no_prefix_and_prefix_pent$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix_pent$has_suffix)
dat_mt_impf_no_prefix <- dat_mt_impf |> filter(has_prefix == 0)
dat_mt_impf_prefix <- dat_mt_impf |> filter(has_prefix == 1)
dat_mt_imp_no_prefix_and_prefix <-rbind(dat_mt_impf_no_prefix, dat_mt_impf_prefix) |> droplevels()
prefix_table <- table(dat_mt_imp_no_prefix_and_prefix$has_prefix, dat_mt_imp_no_prefix_and_prefix$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix$law_phase2)
prefix_table
phase <- 'Pent'
dat_mt_imp_no_prefix_and_prefix_pent <- dat_mt_imp_no_prefix_and_prefix |> filter(law_phase2 == phase)
table(dat_mt_imp_no_prefix_and_prefix_pent$has_prefix, dat_mt_imp_no_prefix_and_prefix_pent$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix_pent$has_suffix)
phase <- 'FP'
dat_mt_imp_no_prefix_and_prefix_pent <- dat_mt_imp_no_prefix_and_prefix |> filter(law_phase2 == phase)
table(dat_mt_imp_no_prefix_and_prefix_pent$has_prefix, dat_mt_imp_no_prefix_and_prefix_pent$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix_pent$has_suffix)
dat_mt_impf_no_prefix <- dat_mt_impf |> filter(has_prefix == 0)
dat_mt_impf_prefix <- dat_mt_impf |> filter(has_prefix == 1)
dat_mt_imp_no_prefix_and_prefix <-rbind(dat_mt_impf_no_prefix, dat_mt_impf_prefix) |> droplevels()
prefix_table <- table(dat_mt_imp_no_prefix_and_prefix$has_prefix, dat_mt_imp_no_prefix_and_prefix$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix$law_phase2)
prefix_table
phase <- 'FP'
dat_mt_imp_no_prefix_and_prefix_pent <- dat_mt_imp_no_prefix_and_prefix |> filter(law_phase2 == phase)
table(dat_mt_imp_no_prefix_and_prefix_pent$has_prefix, dat_mt_imp_no_prefix_and_prefix_pent$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix_pent$has_suffix)
dat_mt_imp_no_prefix_and_prefix_pent <- dat_mt_imp_no_prefix_and_prefix |> filter(law_phase2 == 'Pent')
table(dat_mt_imp_no_prefix_and_prefix_pent$has_prefix, dat_mt_imp_no_prefix_and_prefix_pent$has_vowel_letter, dat_mt_imp_no_prefix_and_prefix_pent$has_suffix)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
DATASET <- 'niph_hiph_pe_yod.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
table(dat$lex)
dat$second_char <- str_sub(dat$lex, 2, 2)
dat$first_char <- str_sub(dat$g_cons, 1, 1)
dat <- droplevels(dat)
table(dat$second_char)
jya <- dat |> filter(lex == 'JY>[')
dim(jya)
dim(dat)
dat <- dat |> filter(second_char != 'Y')
dim(dat)
#############################################
# NEEDED FOR CLUSTERING IN FILE clustering_regression_results.R
phase_book_df <- dat |>  distinct(law_phase2, scr_book2)
write.csv(phase_book_df,
'C:/Users/geitb/Dropbox/monograph_orthography/cluster_analysis/phase_book_ni_hi_pe_yod.csv',
row.names=FALSE)
# SUFFIX EFFECT
colnames(dat)
table(jya$vs)
dat <- rbind(dat, jya)
qsp <-  dat |> filter(scroll != 'MT') |> filter(scroll %in% QSP_SCROLLS)
non_qsp <- dat |> filter(scroll != 'MT') |> filter(!scroll %in% QSP_SCROLLS)
mt <- dat |> filter(scroll == 'MT')
table(mt$has_suffix, mt$has_vowel_letter)
table(non_qsp$has_suffix, non_qsp$has_vowel_letter)
table(qsp$has_suffix, qsp$has_vowel_letter)
table(mt$book, mt$has_vowel_letter)
#####################
table(dat$book2, dat$has_vowel_letter)
dat |> filter(book2 == 'Jeremiah')
table(dat$second_char, dat$has_vowel_letter)
library(binom)
fullness_df <- dat |> filter(scroll == 'MT') |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$second_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=second_char, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20))
# DATA EXPLORATION
#install.packages('binom')
library(binom)
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('Pent', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=groups)
hpd_fullness
ggplot(data = hpd_fullness, aes(x = law_phase2, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('MT Pentateuch', 'MT Former Prophets', 'MT LBH', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Former Prophets', 'Non-QSP LBH',
'Non-QSP Other',
'QSP Pentateuch', 'QSP Former Prophets', 'QSP Other')
hpd_fullness$law_phase2 <- factor(groups, levels=groups)
groups <- c('MT Pentateuch', 'MT Former Prophets', 'MT LBH', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Former Prophets',
'Non-QSP Other',
'QSP Pentateuch', 'QSP Former Prophets', 'QSP Other')
hpd_fullness$law_phase2 <- factor(groups, levels=groups)
hpd_fullness
ggplot(hpd_fullness) +
geom_bar( aes(x=law_phase2, y=mean), stat="identity", fill='skyblue', alpha=0.7) +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3) +
ylab('Fraction of full spelling') +
xlab('') +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggsave(file.path(IMAGE_FOLDER, 'explore_pe_yod_hif_groups.png'))
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs/images_pe_yod_hif'
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs/images_pe_yod_hiph'
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('MT Pentateuch', 'MT Former Prophets', 'MT LBH', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Former Prophets',
'Non-QSP Other',
'QSP Pentateuch', 'QSP Former Prophets', 'QSP Other')
hpd_fullness$law_phase2 <- factor(groups, levels=groups)
hpd_fullness
ggplot(hpd_fullness) +
geom_bar( aes(x=law_phase2, y=mean), stat="identity", fill='skyblue', alpha=0.7) +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3) +
ylab('Fraction of full spelling') +
xlab('') +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggsave(file.path(IMAGE_FOLDER, 'explore_pe_yod_hif_groups.png'))
fullness_df <- dat |> group_by(lex) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$lex <- fullness_df$lex
groups <- c('Pent', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=groups)
hpd_fullness
ggplot(data = hpd_fullness, aes(x = lex, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=lex, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
table(dat$vt)
ptc <- dat |> filter(second_char != 'Y') |> filter(vt %in% c('ptca', 'ptcp'))
table(ptc$has_vowel_letter)
table(ptc$has_prefix, ptc$has_vowel_letter)
table(ptc$has_suffix, ptc$has_vowel_letter)
table(dat_no_y$has_vowel_letter, dat_no_y$scr_book2)
table(dat$has_suffix, dat$has_vowel_letter)
hlk <- dat |> filter(lex == 'HLK[')
dim(hlk)
table(hlk$vt)
table(hlk$vt, has_vowel_letter)
table(hlk$vt, hlk$has_vowel_letter)
table(hlk$vs)
head(hlk)
table(hlk$vowel_letter)
table(dat$vowel_letter)
head(dat |> filter(vowel_letter == 'J'))
dat |> filter(lex == 'JVB[')
tail(hlk)
str(dat)
str(dat)
library(tidyverse)
library(brms)
library(bayesplot)
library(tidybayes)
library(ggeffects)
library(bayestestR)
library(binom)
IMAGE_FOLDER <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs/images_pe_yod_hiph'
scripts_path <- 'C:/Users/geitb/Dropbox/monograph_orthography/verbs'
functions_path <- file.path(scripts_path, 'functions.R')
config_path <- file.path(scripts_path, 'config.R')
source(functions_path)
source(config_path)
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
DATASET <- 'niph_hiph_pe_yod.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
table(dat$lex)
hlk <- dat |> filter(lex == 'HLK[')
dim(hlk)
table(hlk$vt, hlk$has_vowel_letter)
table(hlk$vs)
head(hlk)
tail(hlk)
table(hlk$vowel_letter)
table(dat$vowel_letter)
head(dat |> filter(vowel_letter == 'J'))
table(hlk$vowel_letter)
tail(hlk)
table(hlk$scroll)
table(hlk$vowel_letter)
table(dat$vowel_letter)
head(dat |> filter(vowel_letter == 'J'))
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('MT Pentateuch', 'MT Former Prophets', 'MT LBH', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Former Prophets', 'Non-QSP Other',
'QSP Pentateuch', 'QSP Former Prophets', 'QSP Other')
hpd_fullness$law_phase2 <- factor(groups, levels=groups)
hpd_fullness
ggplot(hpd_fullness) +
geom_bar( aes(x=law_phase2, y=mean), stat="identity", fill='skyblue', alpha=0.7) +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3) +
ylab('Fraction of full spelling') +
xlab('') +
theme(axis.text.x = element_text(angle = 45, hjust=1))
ggsave(file.path(IMAGE_FOLDER, 'explore_pe_yod_hif_groups.png'))
YOD_VERBS <- c('JBC[', 'JNQ[', 'JCR[', 'JVB[', 'JQY[', 'JLL[', 'JMN[')
law_phase2_levels <- c('Pent', 'Pent_SP', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP', 'LBH_non_QSP',
'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
DATASET <- 'niph_hiph_pe_yod.csv'
dat <- import_bib_data(DATA_FOLDER, DATASET)
dat <- dat |>
remove_ketiv_qere() |>
add_col_has_suffix() |>
make_book2_column() |>
make_scr_book2_column() |>
make_law_phase_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS) |>
make_law_phase2_column(LAW_BOOKS, EBH_BOOKS, LBH_BOOKS, QSP_SCROLLS, law_phase2_levels) |>
split_isaiah_scroll() |>
make_factor_columns(factor_columns) |>
droplevels()
str(dat)
dat$qsp_sp <- ifelse(dat$scroll %in% QSP_SCROLLS, 'QSP', ifelse(dat$scroll == 'MT', 'MT', 'Other'))
dat$qsp_sp <- as.factor(dat$qsp_sp)
table(dat$qsp_sp)
table(dat$lex)
head(hlk)
yod <- dat |> filter(lex %in% YOD_VERBS)
waw <- dat |> filter(!(lex %in% YOD_VERBS))
table(yod$vowel_letter)
yod |> filter(vowel_letter == 'W')
yod |> filter(vowel_letter == 'J')
table(yod$vowel_letter, yod$verb)
table(yod$vowel_letter, yod$lex)
dat |> filter(lex == 'JBC[')
hlk <- dat |> filter(lex == 'HLK[')
dim(hlk)
table(hlk$vt, hlk$has_vowel_letter)
yod <- dat |> filter(lex %in% YOD_VERBS)
waw <- dat |> filter(!(lex %in% YOD_VERBS))
table(yod$vowel_letter)
table(yod$vowel_letter, yod$lex)
waw <- dat |> filter(!(lex %in% YOD_VERBS)) |> droplevels()
table(yod$vowel_letter)
table(yod$vowel_letter, yod$lex)
table(waw$vowel_letter, yod$lex)
table(waw$vowel_letter, waw$lex)
fullness_df <- dat |> group_by(law_phase2) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$law_phase2 <- fullness_df$law_phase2
groups <- c('MT Pentateuch', 'MT Former Prophets', 'MT LBH', 'MT Other',
'Non-QSP Pentateuch', 'Non-QSP Former Prophets', 'Non-QSP Other',
'QSP Pentateuch', 'QSP Former Prophets', 'QSP Other')
hpd_fullness$law_phase2 <- factor(groups, levels=groups)
hpd_fullness
ggplot(hpd_fullness) +
geom_bar( aes(x=law_phase2, y=mean), stat="identity", fill='skyblue', alpha=0.7) +
geom_errorbar( aes(x=law_phase2, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3) +
ylab('Fraction of full spelling') +
xlab('') +
theme(axis.text.x = element_text(angle = 45, hjust=1))
fullness_df <- dat |> group_by(lex) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness
hpd_fullness$lex <- fullness_df$lex
groups <- c('Pent', 'FP', 'LBH', 'Other',
'Pent_non_QSP', 'FP_non_QSP','LBH_non_QSP' ,'Other_non_QSP',
'Pent_QSP', 'FP_QSP', 'Other_QSP')
hpd_fullness$law_phase2 <- factor(hpd_fullness$law_phase2, levels=groups)
hpd_fullness
ggplot(data = hpd_fullness, aes(x = lex, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=lex, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
yod <- dat |> filter(lex %in% YOD_VERBS) |> droplevels()
waw <- dat |> filter(!(lex %in% YOD_VERBS)) |> droplevels()
table(yod$vowel_letter)
table(yod$vowel_letter, yod$lex)
dat |> filter(lex == 'JBC[')
table(waw$vowel_letter, waw$lex)
########################################################################
dat$second_char <- str_sub(dat$lex, 2, 2)
dat$first_char <- str_sub(dat$g_cons, 1, 1)
dat <- droplevels(dat)
table(dat$second_char)
jya <- dat |> filter(lex == 'JY>[')
dim(jya)
dim(dat)
dat <- dat |> filter(second_char != 'Y')
dim(dat)
#############################################
# NEEDED FOR CLUSTERING IN FILE clustering_regression_results.R
phase_book_df <- dat |>  distinct(law_phase2, scr_book2)
write.csv(phase_book_df,
'C:/Users/geitb/Dropbox/monograph_orthography/cluster_analysis/phase_book_ni_hi_pe_yod.csv',
row.names=FALSE)
hlk <- dat |> filter(lex == 'HLK[')
dim(hlk)
table(hlk$vt, hlk$has_vowel_letter)
table(hlk$vs)
head(hlk)
tail(hlk)
table(hlk$scroll)
table(hlk$vowel_letter)
table(dat$vowel_letter)
head(dat |> filter(vowel_letter == 'J'))
# SUFFIX EFFECT
colnames(dat)
table(jya$vs)
dat <- rbind(dat, jya)
qsp <-  dat |> filter(scroll != 'MT') |> filter(scroll %in% QSP_SCROLLS)
non_qsp <- dat |> filter(scroll != 'MT') |> filter(!scroll %in% QSP_SCROLLS)
mt <- dat |> filter(scroll == 'MT')
table(mt$has_suffix, mt$has_vowel_letter)
table(non_qsp$has_suffix, non_qsp$has_vowel_letter)
table(qsp$has_suffix, qsp$has_vowel_letter)
table(mt$book, mt$has_vowel_letter)
dat$has_pref_w <- ifelse(dat$prefix == 'W', 1, 0) |> as.factor()
table(dat$vt, dat$has_vowel_letter, dat$has_pref_w)
table(dat$first_char, dat$has_vowel_letter)
table(dat$vs, dat$has_vowel_letter)
table(dat$second_char, dat$has_vowel_letter)
sib <- dat |> filter(scroll == 'MT') |> filter(second_char %in% c('S', 'Y', 'F', 'C'))
sib <- droplevels(sib)
table(sib$lex, sib$has_vowel_letter)
dat |> filter(lex == 'JSR[')
dat |> filter(lex == 'JYQ[')
dat |> filter(lex == 'JYR[')
dat |> filter(lex == 'JY<[')
dat |> filter(lex == 'JYG[')
jcb <- dat |> filter(scroll == 'MT') |> filter(lex == 'JCB[') |> droplevels()
table(jcb$book2, jcb$has_vowel_letter)
table(jcb$vs)
t <- dat |> filter(second_char == 'C')
table(t$book, t$has_vowel_letter)
# JCB
jcb_counts <- as.data.frame(table(jcb$book2, jcb$has_vowel_letter))
jcb_counts$spelling <- ifelse(jcb_counts$Var2 == 1, 'full', 'defective')
ggplot(jcb_counts, aes(fill=spelling, y=Freq, x=Var1)) +
geom_bar(position="stack", stat="identity", color = "black") +
labs(x = '', y = 'Count') +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
bet <- dat |> filter(second_char == 'B')
bet <- droplevels(bet)
table(bet$lex, bet$has_vowel_letter)
# JBC
jbc <- dat |> filter(scroll == 'MT') |> filter(lex == 'JBC[') %>% droplevels()
table(jbc$vs)
jbc_counts <- as.data.frame(table(jbc$book2, jbc$has_vowel_letter))
jbc_counts$spelling <- ifelse(jbc_counts$Var2 == 1, 'full', 'defective')
ggplot(jbc_counts, aes(fill=spelling, y=Freq, x=Var1)) +
geom_bar(position="stack", stat="identity", color = "black") +
labs(x = '', y = 'Count') +
theme_minimal() +
theme(text = element_text(size = 20))
ggplot(jcb_counts, aes(fill=spelling, y=Freq, x=Var1)) +
geom_bar(position="stack", stat="identity", color = "black") +
labs(x = '', y = 'Count') +
theme_minimal() +
theme(text = element_text(size = 20)) +
theme(axis.text.x = element_text(angle = 45, hjust=1))
#####################
table(dat$book2, dat$has_vowel_letter)
dat |> filter(book2 == 'Jeremiah')
table(dat$second_char, dat$has_vowel_letter)
library(binom)
fullness_df <- dat |> filter(scroll == 'MT') |> group_by(second_char) |> summarise(full_count = sum(as.numeric(as.character(has_vowel_letter))),
total_count = n())
fullness_df
hpd_fullness <- binom.bayes(
x = fullness_df$full_count, n = fullness_df$total_count, type = "highest", conf.level = 0.95, tol = 1e-9)
hpd_fullness$second_char <- fullness_df$second_char
hpd_fullness
hpd_fullness$second_char <- factor(hpd_fullness$second_char, levels=fullness_df$second_char)
ggplot(data = hpd_fullness, aes(x = second_char, y = mean)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) +
labs(x = '', y = 'Fraction of full spelling') +
geom_errorbar( aes(x=second_char, ymin=lower, ymax=upper), width=0.4, colour='black', alpha=0.9, size=1.3,
position = position_dodge(0.9)) +
theme_minimal() +
theme(text = element_text(size = 20))
# JBC
jbc <- dat |> filter(scroll == 'MT') |> filter(lex == 'JBC[') %>% droplevels()
table(jbc$vs)
jbc_counts <- as.data.frame(table(jbc$book2, jbc$has_vowel_letter))
jbc_counts$spelling <- ifelse(jbc_counts$Var2 == 1, 'full', 'defective')
ggplot(jbc_counts, aes(fill=spelling, y=Freq, x=Var1)) +
geom_bar(position="stack", stat="identity", color = "black") +
labs(x = '', y = 'Count') +
theme_minimal() +
theme(text = element_text(size = 20))
ggsave(file.path(IMAGE_FOLDER, 'explore_jbc_mt'))
ggplot(jbc_counts, aes(fill=spelling, y=Freq, x=Var1)) +
geom_bar(position="stack", stat="identity", color = "black") +
labs(x = '', y = 'Count') +
theme_minimal() +
theme(text = element_text(size = 20))
ggsave(file.path(IMAGE_FOLDER, 'explore_jbc_mt'))
